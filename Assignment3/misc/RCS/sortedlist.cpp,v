head	1.12;
access;
symbols;
locks;
comment	@// @;


1.12
date	2019.02.07.21.54.19;	author -;	state -;
branches;
next	1.11;

1.11
date	2019.02.07.21.54.09;	author -;	state -;
branches;
next	1.10;

1.10
date	2019.02.07.21.53.37;	author -;	state -;
branches;
next	1.9;

1.9
date	2019.02.07.21.49.38;	author -;	state -;
branches;
next	1.8;

1.8
date	2019.02.07.21.49.09;	author -;	state -;
branches;
next	1.7;

1.7
date	2019.02.07.21.48.20;	author -;	state -;
branches;
next	1.6;

1.6
date	2019.02.07.21.47.40;	author -;	state -;
branches;
next	1.5;

1.5
date	2019.02.07.21.42.09;	author -;	state -;
branches;
next	1.4;

1.4
date	2019.02.07.21.40.32;	author -;	state -;
branches;
next	1.3;

1.3
date	2019.02.07.21.40.01;	author -;	state -;
branches;
next	1.2;

1.2
date	2019.02.07.21.39.23;	author -;	state -;
branches;
next	1.1;

1.1
date	2019.02.07.21.38.52;	author -;	state -;
branches;
next	;


desc
@@


1.12
log
@-
@
text
@// $Id: sortedlist.cpp,v 1.11 2019-02-07 13:54:09-08 - - $

//
// List insertion algorithm.
// Insert nodes into a singly-linked list using only operator<
// to form comparisons.  Do not insert elements that already
// exist.
//

#include <iostream>
#include <stdexcept>
#include <string>
using namespace std;

template <typename Type>
struct xless {
   bool operator() (const Type& left, const Type& right) const {
      return left < right;
   }
};

template <typename Type>
struct xgreater {
   bool operator() (const Type& left, const Type& right) const {
      return left > right;
   }
};


template <typename item_t, class less_t=xless<item_t>>
struct sorted_list {
   struct node {
      item_t item;
      node* link;
      node (const item_t& item_, node* link_):
                  item(item_),   link(link_) {
      }
   };
   less_t less;
   node* head = nullptr;

   sorted_list() = default; // Needed because default is suppressed.
   sorted_list (const sorted_list&) = delete;
   sorted_list& operator= (const sorted_list&) = delete;
   ~sorted_list();

   void insert (const item_t& newitem);
   item_t& front() { return head->item; }
   void pop_front();
};

template <typename item_t, class less_t>
sorted_list<item_t,less_t>::~sorted_list() {
   while (head != nullptr) pop_front();
}

template <typename item_t, class less_t>
void sorted_list<item_t,less_t>::insert (const item_t& newitem) {
   node** curr = &head;
   while (*curr != nullptr and less ((*curr)->item, newitem)) {
      curr = &(*curr)->link;
   }
   if (*curr == nullptr or less (newitem, (*curr)->item)) {
      *curr = new node (newitem, *curr);
   }
}

template <typename item_t, class less_t>
void sorted_list<item_t,less_t>::pop_front() {
   if (head == nullptr) throw underflow_error (__PRETTY_FUNCTION__);
   node* old = head;
   head = head->link;
   delete old;
}

template <typename item_t, class less_t=xless<item_t>>
void process (int argc, char** argv, const string& label) {
   sorted_list<string,less_t> list;
   for (char** argp = &argv[1]; argp != &argv[argc]; ++argp) {
      cout << label << ": Insert: " << *argp << endl;
      list.insert (*argp);
   }
   cout << endl;
   for (auto itor = list.head; itor != nullptr; itor = itor->link) {
      cout << label << ": Sorted: " << itor->item << endl;
   }
   cout << endl;
}

int main (int argc, char** argv) {
   process<string> (argc, argv, "Default");
   process<string,xgreater<string>> (argc, argv, "Greater");
   return 0;
}

/*
//TEST// alias grind='valgrind --leak-check=full --show-reachable=yes'
//TEST// grind --log-file=sortedlist.out.log \
//TEST//       sortedlist foo bar baz qux zxcvbnm asdfg qwerty \
//TEST//       bar baz foo qwerty hello hello 01234 56789 \
//TEST//       >sortedlist.out 2>&1
//TEST// mkpspdf sortedlist.ps sortedlist.cpp* sortedlist.out*
*/
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: sortedlist.cpp,v 1.10 2019-02-07 13:53:37-08 - - $
d53 1
a53 1
sorted_list<item_t,less_t>::~~sorted_list() {
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: sortedlist.cpp,v 1.9 2019-02-07 13:49:38-08 - - $
d85 1
a85 1
      cout << label << ": Sorted: " << itor->front() << endl;
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: sortedlist.cpp,v 1.8 2019-02-07 13:49:09-08 - - $
d45 1
d53 5
d84 2
a85 3
   while (list.head != nullptr) {
      cout << label << ": Sorted: " << list.front() << endl;
      list.pop_front();
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: sortedlist.cpp,v 1.7 2019-02-07 13:48:20-08 - - $
d94 2
a95 2
//TEST//       sortedlist foo bar baz qux quux zxcvbnm asdfg qwerty \
//TEST//       bar baz foo quux qwerty hello hello 01234 56789 \
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: sortedlist.cpp,v 1.6 2019-02-07 13:47:40-08 - - $
d95 1
a95 1
//TEST//       bar baz foo quux qwerty hello hello 1234567890 \
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: sortedlist.cpp,v 1.5 2019-02-07 13:42:09-08 - - $
d77 1
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: sortedlist.cpp,v 1.4 2019-02-07 13:40:32-08 - - $
d92 2
a93 1
//TEST// grind sortedlist foo bar baz qux quux zxcvbnm asdfg qwerty \
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: sortedlist.cpp,v 1.3 2019-02-07 13:40:01-08 - - $
d92 1
a92 2
//TEST// grind --log-file=.out.log \
//TEST//       sortedlist foo bar baz qux quux zxcvbnm asdfg qwerty \
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: sortedlist.cpp,v 1.2 2019-02-07 13:39:23-08 - - $
d36 1
a36 1
                  item(item_), link(link_) {
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: sortedlist.cpp,v 1.1 2019-02-07 13:38:52-08 - - $
d31 1
a31 1
struct linked_list {
d42 3
a44 3
   linked_list() = default; // Needed because default is suppressed.
   linked_list (const linked_list&) = delete;
   linked_list& operator= (const linked_list&) = delete;
d46 1
a46 1
   void insert_ascend (const item_t& newitem);
d52 1
a52 1
void linked_list<item_t,less_t>::insert_ascend (const item_t& newitem) {
d63 1
a63 1
void linked_list<item_t,less_t>::pop_front() {
d72 1
a72 1
   linked_list<string,less_t> list;
d75 1
a75 1
      list.insert_ascend (*argp);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: insertlist.cpp,v 1.8 2019-02-07 13:36:43-08 - - $
d92 2
a93 2
//TEST// grind --log-file=insertlist.out.log \
//TEST//       insertlist foo bar baz qux quux zxcvbnm asdfg qwerty \
d95 2
a96 2
//TEST//       >insertlist.out 2>&1
//TEST// mkpspdf insertlist.ps insertlist.cpp* insertlist.out*
@
