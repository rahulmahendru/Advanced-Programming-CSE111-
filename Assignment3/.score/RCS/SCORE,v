head	1.9;
access;
symbols;
locks;
comment	@# @;


1.9
date	2020.01.31.23.19.04;	author -;	state -;
branches;
next	1.8;

1.8
date	2020.01.28.22.02.50;	author -;	state -;
branches;
next	1.7;

1.7
date	2019.11.07.00.07.11;	author -;	state -;
branches;
next	1.6;

1.6
date	2019.11.07.00.01.44;	author -;	state -;
branches;
next	1.5;

1.5
date	2019.10.29.22.47.28;	author -;	state -;
branches;
next	1.4;

1.4
date	2019.10.22.19.40.30;	author -;	state -;
branches;
next	1.3;

1.3
date	2018.02.27.21.51.13;	author -;	state -;
branches;
next	1.2;

1.2
date	2018.02.15.23.28.01;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.06.28.21.48.38;	author -;	state -;
branches;
next	;


desc
@@


1.9
log
@-
@
text
@$Id: SCORE,v 1.8 2020-01-28 14:02:50-08 - - $

Copy all of the files in this directory into the student's
directory.  For each point deduction, give a reason.  Numbers in
parens are the max points for each check.

Check to see if they are working alone or doing pair
programming.  If pair programming, they should have a symlink to
their partner's directory.  If it is not there, you should make
one.

Make sure PARTNER is a symlink, not a file.  Example: charles
and ada are working together.
. dir charles/ should have a symlink PARTNER -> ../ada
. dir ada/ should have a symlink PARTNER -> ../charles

Grade only one partner's code and assign them the same score.

*****************************************************************

SOURCE CODE.

     Run mk.build

     (3) Checksource was silent, did not complain.  No extra
         files were submitted, except as per asgt spec.  C++
         source are all called .h, .tcc, .cpp as appropriate.

     (3) Used xless, xpair in code, and did not
         use anything prohibited from the STL.

     (3) main.cpp handles files correctly.  Does options analysis
         and parses input lines

     (3) Main input line dispatch to appropriate function.

     (3) Main used iterators for the = and =value "all of the 
         key..." functions and did not make a copy of the 
         entire list into another data structure.

     The most significant work was building listmap.

     (3) General good appearance and implementation of listmap.

     (3) good code for listmap::insert
         deduct 2 points if any use of function other than less
         for comparison, specifically don't use operator==

     (3) good code for listmap::find
         deduct 2 points if any use of function other than less
         for comparison, specifically don't use operator==

     (3) listmap::iterator::erase

     (3) listmap::iterator::operator++ 

source points: /30
min 1, max 30

*****************************************************************

PROGRAM TESTING:

    (10) If gmake failed because a file that should have been
         submitted but was not, copy in that file from the
         assignment directory and try again.  If that fixed
         compilation, deduct 10 points from SUBTOTAL in addition
         to any other deduction of points.

     (3) If gmake failed, try to compile manually with:
         g++ -std=gnu++17 -g -O0 -Wall -Wextra *.cpp -o keyvalue
         If that worked, deduct these three 3 points.
         If not, assign 0 for this section.
         If gmake succeeded in building keyvalue, keep these 3 points.

     Run mk.tests

     (3) Leaks check showed no memory leaks.

     Look at the other tests and check output for correctness.
     Each should work in the same way as pkeyvalue.perl

     (3) run1.stdin

     (3) run2.stdin

     (3) run3.files

     (3) run4.files

     (3) run5.files

     (3) run6.files

     (3) run7.nofiles

     Unix correctness:

     (3) was the exit status 0 for good tests and non-0 for bad?
         were error messages sent to stderr (cerr)?

     subtotal = /30 (max 30).

     If there were no core dumps during testing, or if the
     subtotal is less than 24, transfer this subtotal to the
     line below.  If there were any core dumps, the maximum
     testing points here will be 24.

testing points: /30
min 0, max 30.

*****************************************************************

SUBTOTAL=
min 1, max 60

If pair programming, TOTALSCORE = SUBTOTAL - TOTALPAIR.
If not, TOTALSCORE = SUBTOTAL.

TOTALSCORE=
min 1, max 60


@


1.8
log
@-
@
text
@d1 1
a1 1
$Id: SCORE,v 1.7 2019-11-06 16:07:11-08 - - $
d117 1
a117 1
If pair programming, TOTALSCORE = SUBTOTAL - TOTAL1.
@


1.7
log
@-
@
text
@d1 1
a1 1
$Id: SCORE,v 1.6 2019-11-06 16:01:44-08 - - $
d63 6
@


1.6
log
@-
@
text
@d1 1
a1 1
$Id: SCORE,v 1.5 2019-10-29 15:47:28-07 - - $
d47 1
a47 1
         for comparison
d51 1
a51 1
         for comparison
@


1.5
log
@-
@
text
@d1 1
a1 1
$Id: SCORE,v 1.4 2019-10-22 12:40:30-07 - - $
d45 3
a47 1
     (3) good code for listmap::put (insert)
d50 2
@


1.4
log
@-
@
text
@d1 1
a1 1
$Id: SCORE,v 1.3 2018-02-27 13:51:13-08 - - $
d32 1
a32 1
     (3) main.cc handles files correctly.  Does options analysis
@


1.3
log
@-
@
text
@d1 1
a1 1
$Id: SCORE,v 1.2 2018-02-15 15:28:01-08 - - $
d26 2
a27 8
         files were submitted, except as per asgt spec.
         C++ source are all called .h or .cc/.cpp as appropriate.
         (.tcc for template source included in a .h)

     (3) Used good consistent indentation.  Did not use any
         one-letter idents, used only meaningful idents.
         Did not leave any commented-out code interspersed
         with running code.
d36 4
@


1.2
log
@-
@
text
@d1 1
a1 1
$Id: SCORE,v 1.1 2016-06-28 14:48:38-07 - - $
d63 1
a63 1
         CC -g -features=extensions -o ydc *.cc
@


1.1
log
@-
@
text
@d1 1
a1 1
$Id: SCORE,v 1.6 2016-05-09 13:23:58-07 - - $
d26 1
a26 1
	 files were submitted, except as per asgt spec.
d31 3
a33 1
	 one-letter idents, used only meaningful idents.
@
