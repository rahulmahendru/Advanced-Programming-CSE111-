head	1.15;
access;
symbols;
locks;
comment	@// @;


1.15
date	2020.01.22.22.21.55;	author -;	state -;
branches;
next	1.14;

1.14
date	2019.10.16.22.17.26;	author -;	state -;
branches;
next	1.13;

1.13
date	2019.10.08.20.55.31;	author -;	state -;
branches;
next	1.12;

1.12
date	2018.06.27.21.44.57;	author -;	state -;
branches;
next	1.11;

1.11
date	2018.01.25.22.02.55;	author -;	state -;
branches;
next	1.10;

1.10
date	2018.01.25.21.58.29;	author -;	state -;
branches;
next	1.9;

1.9
date	2016.01.15.00.16.52;	author -;	state -;
branches;
next	1.8;

1.8
date	2015.01.03.02.13.23;	author -;	state -;
branches;
next	1.7;

1.7
date	2015.01.03.02.10.18;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.06.26.23.01.04;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.06.11.20.34.25;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.03.27.02.49.30;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.03.27.02.01.09;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.03.27.01.43.29;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.03.27.01.39.40;	author -;	state -;
branches;
next	;


desc
@@


1.15
log
@-
@
text
@// $Id: debug.cpp,v 1.14 2019-10-16 15:17:26-07 - - $

#include <climits>
#include <iostream>
#include <vector>

using namespace std;

#include "debug.h"
#include "util.h"

debugflags::flagset_ debugflags::flags_ {};

void debugflags::setflags (const string& initflags) {
   for (const unsigned char flag: initflags) {
      if (flag == '@@') flags_.set();
                  else flags_.set (flag, true);
   }
}

// getflag -
//    Check to see if a certain flag is on.

bool debugflags::getflag (char flag) {
   // WARNING: Don't TRACE this function or the stack will blow up.
   return flags_.test (static_cast<unsigned char> (flag));
}

void debugflags::where (char flag, const char* file, int line,
                        const char* pretty_function) {
   cout << "DEBUG(" << flag << ") "
        << file << "[" << line << "] " << endl
        << "... " << pretty_function << endl;
}

@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.13 2019-10-08 13:55:31-07 - - $
d31 3
a33 2
   cout << exec::execname() << ": DEBUG(" << flag << ") "
        << file << "[" << line << "] " << pretty_function << endl;
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.12 2018-06-27 14:44:57-07 - - $
d12 1
a12 1
debugflags::flagset debugflags::flags {};
d16 2
a17 2
      if (flag == '@@') flags.set();
                  else flags.set (flag, true);
d26 1
a26 1
   return flags.test (static_cast<unsigned char> (flag));
d32 1
a32 2
        << file << "[" << line << "] " << endl
        << "   " << pretty_function << endl;
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.11 2018-01-25 14:02:55-08 - - $
d31 1
a31 1
   cout << execname() << ": DEBUG(" << flag << ") "
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.10 2018-01-25 13:58:29-08 - - $
d33 1
a33 1
        << pretty_function << endl;
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.9 2016-01-14 16:16:52-08 - - $
d30 1
a30 1
                        const char* func) {
d32 2
a33 1
        << file << "[" << line << "] " << func << endl;
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.8 2015-01-02 18:13:23-08 - - $
d32 1
a32 1
        << file << "[" << line << "] " << func << "()" << endl;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.7 2015-01-02 18:10:18-08 - - $
a20 1
//
a22 1
//
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.6 2014-06-26 16:01:04-07 - - $
d12 1
a12 1
bitset<UCHAR_MAX + 1> debugflags::flags {};
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.5 2014-06-11 13:34:25-07 - - $
d12 1
a12 1
vector<bool> debugflags::flags (UCHAR_MAX + 1, false);
d16 2
a17 2
      if (flag == '@@') flags.assign (flags.size(), true);
                  else flags[flag] = true;
d28 1
a28 1
   return flags[static_cast<unsigned char> (flag)];
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.4 2014-03-26 19:49:30-07 - - $
a2 1
#include <cassert>
d15 1
a15 1
   for (const char flag: initflags) {
d28 1
a28 3
   unsigned uflag = (unsigned char) flag;
   assert (uflag < flags.size());
   return flags[uflag];
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.3 2014-03-26 19:01:09-07 - - $
a19 8
   // Note that DEBUGF can trace setflags.
   if (getflag ('x')) {
      string flag_chars;
      for (size_t index = 0; index < flags.size(); ++index) {
         if (getflag (index)) flag_chars += (char) index;
      }
      DEBUGF ('x', "debugflags::flags = " << flag_chars);
   }
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.2 2014-03-26 18:43:29-07 - - $
d45 1
a45 1
        << file << "[" << line << "]" << func << endl;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.1 2014-03-26 18:39:40-07 - - $
d3 1
d21 7
a27 1
   DEBUGF ('t', "flags = " << flags);
d37 3
a39 1
   return flags[flag];
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: trace.cpp,v 1.9 2014-03-26 17:34:07-07 - - $
d12 1
a12 1
vector<bool> traceflags::flags (UCHAR_MAX + 1, false);
d14 1
a14 1
void traceflags::setflags (const string& initflags) {
d19 2
a20 2
   // Note that TRACE can trace setflags.
   TRACE ('t', "flags = " << flags);
d28 1
a28 1
bool traceflags::getflag (char flag) {
d33 2
a34 2
void traceflags::show_where (char flag, const char* file, int line,
                             const char* func) {
d36 1
a36 1
        << file << "[" << line << "]" func << endl;
@
