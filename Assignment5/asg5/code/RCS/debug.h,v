head	1.5;
access;
symbols;
locks;
comment	@ * @;


1.5
date	2019.11.18.22.49.25;	author -;	state -;
branches;
next	1.4;

1.4
date	2018.01.26.00.04.38;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.07.21.04.32.12;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.07.21.03.39.47;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.07.16.23.47.51;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@// $Id: debug.h,v 1.4 2018-01-25 16:04:38-08 - - $

#ifndef __DEBUG_H__
#define __DEBUG_H__

#include <bitset>
#include <climits>
#include <string>
using namespace std;

// debug -
//    static class for maintaining global debug flags.
// setflags -
//    Takes a string argument, and sets a flag for each char in the
//    string.  As a special case, '@@', sets all flags.
// getflag -
//    Used by the DEBUGF macro to check to see if a flag has been set.
//    Not to be called by user code.

class debugflags {
   private:
      using flagset = bitset<UCHAR_MAX + 1>;
      static flagset flags;
   public:
      static void setflags (const string& optflags);
      static bool getflag (char flag);
      static void where (char flag, const char* file, int line,
                         const char* pretty_function);
};


// DEBUGF -
//    Macro which expands into debug code.  First argument is a
//    debug flag char, second argument is output code that can
//    be sandwiched between <<.  Beware of operator precedence.
//    Example:
//       DEBUGF ('u', "foo = " << foo);
//    will print two words and a newline if flag 'u' is  on.
//    Traces are preceded by filename, line number, and function.

#ifdef NDEBUG
#define DEBUGF(FLAG,CODE) ;
#define DEBUGS(FLAG,STMT) ;
#else
#define DEBUGF(FLAG,CODE) { \
           if (debugflags::getflag (FLAG)) { \
              debugflags::where (FLAG, __FILE__, __LINE__, \
                                 __PRETTY_FUNCTION__); \
              cerr << CODE << endl; \
           } \
        }
#define DEBUGS(FLAG,STMT) { \
           if (debugflags::getflag (FLAG)) { \
              debugflags::where (FLAG, __FILE__, __LINE__, \
                                 __PRETTY_FUNCTION__); \
              STMT; \
           } \
        }
#endif

#endif

@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: debug.h,v 1.1 2018-01-25 14:09:09-08 - - $
d12 1
a12 2
//    static class for maintaining global debug flags, each indicated
//    by a single character.
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: debug.h,v 1.1 2015-07-16 16:47:51-07 - - $
d6 2
a8 1
#include <vector>
a10 1
//
a19 1
//
d23 2
a24 1
      static vector<bool> flags;
d29 1
a29 1
                         const char* func);
a32 1
//
d34 2
a35 2
//    Macro which expands into trace code.  First argument is a
//    trace flag char, second argument is output code that can
a40 1
//
d48 2
a49 1
              debugflags::where (FLAG, __FILE__, __LINE__, __func__); \
d55 2
a56 1
              debugflags::where (FLAG, __FILE__, __LINE__, __func__); \
@


1.2
log
@-
@
text
@d50 1
a50 2
              debugflags::where (FLAG, __FILE__, __LINE__, \
                                 __PRETTY_FUNCTION__); \
d56 1
a56 2
              debugflags::where (FLAG, __FILE__, __LINE__, \
                                 __PRETTY_FUNCTION__); \
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: debug.h,v 1.1 2015-07-16 16:39:04-07 - - $
d50 2
a51 1
              debugflags::where (FLAG, __FILE__, __LINE__, __func__); \
d57 2
a58 1
              debugflags::where (FLAG, __FILE__, __LINE__, __func__); \
@
