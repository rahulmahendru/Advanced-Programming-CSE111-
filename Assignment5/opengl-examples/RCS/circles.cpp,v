head	1.52;
access;
symbols;
locks;
comment	@// @;


1.52
date	2019.02.23.03.16.41;	author -;	state -;
branches;
next	1.51;

1.51
date	2019.02.23.01.38.37;	author -;	state -;
branches;
next	1.50;

1.50
date	2019.02.23.01.34.28;	author -;	state -;
branches;
next	1.49;

1.49
date	2019.02.23.01.30.45;	author -;	state -;
branches;
next	1.48;

1.48
date	2018.08.13.21.44.29;	author -;	state -;
branches;
next	1.47;

1.47
date	2018.08.13.21.44.19;	author -;	state -;
branches;
next	1.46;

1.46
date	2018.08.13.21.44.08;	author -;	state -;
branches;
next	1.45;

1.45
date	2016.07.20.20.50.04;	author -;	state -;
branches;
next	1.44;

1.44
date	2016.04.28.23.11.53;	author -;	state -;
branches;
next	1.43;

1.43
date	2016.04.28.22.58.15;	author -;	state -;
branches;
next	1.42;

1.42
date	2016.04.28.22.56.39;	author -;	state -;
branches;
next	1.41;

1.41
date	2016.04.28.22.56.07;	author -;	state -;
branches;
next	1.40;

1.40
date	2016.04.28.22.53.14;	author -;	state -;
branches;
next	1.39;

1.39
date	2016.04.28.22.51.43;	author -;	state -;
branches;
next	1.38;

1.38
date	2016.04.28.22.50.19;	author -;	state -;
branches;
next	1.37;

1.37
date	2016.04.28.22.50.02;	author -;	state -;
branches;
next	1.36;

1.36
date	2016.04.28.22.49.12;	author -;	state -;
branches;
next	1.35;

1.35
date	2016.04.28.22.47.13;	author -;	state -;
branches;
next	1.34;

1.34
date	2016.04.28.22.45.25;	author -;	state -;
branches;
next	1.33;

1.33
date	2016.04.28.22.43.24;	author -;	state -;
branches;
next	1.32;

1.32
date	2016.04.28.22.42.47;	author -;	state -;
branches;
next	1.31;

1.31
date	2016.04.28.22.40.38;	author -;	state -;
branches;
next	1.30;

1.30
date	2016.04.28.22.40.23;	author -;	state -;
branches;
next	1.29;

1.29
date	2016.04.28.22.39.32;	author -;	state -;
branches;
next	1.28;

1.28
date	2016.04.28.22.39.16;	author -;	state -;
branches;
next	1.27;

1.27
date	2016.04.28.22.36.13;	author -;	state -;
branches;
next	1.26;

1.26
date	2016.04.28.22.35.13;	author -;	state -;
branches;
next	1.25;

1.25
date	2016.04.28.22.33.52;	author -;	state -;
branches;
next	1.24;

1.24
date	2016.04.28.22.33.18;	author -;	state -;
branches;
next	1.23;

1.23
date	2016.04.28.22.32.48;	author -;	state -;
branches;
next	1.22;

1.22
date	2016.04.28.22.31.52;	author -;	state -;
branches;
next	1.21;

1.21
date	2016.04.28.22.30.59;	author -;	state -;
branches;
next	1.20;

1.20
date	2016.04.28.22.30.45;	author -;	state -;
branches;
next	1.19;

1.19
date	2016.04.28.22.22.56;	author -;	state -;
branches;
next	1.18;

1.18
date	2016.04.28.22.20.30;	author -;	state -;
branches;
next	1.17;

1.17
date	2016.04.28.22.19.33;	author -;	state -;
branches;
next	1.16;

1.16
date	2016.04.28.22.16.53;	author -;	state -;
branches;
next	1.15;

1.15
date	2016.03.23.23.41.18;	author -;	state -;
branches;
next	1.14;

1.14
date	2016.03.23.23.40.36;	author -;	state -;
branches;
next	1.13;

1.13
date	2016.03.23.23.40.23;	author -;	state -;
branches;
next	1.12;

1.12
date	2016.03.23.23.38.39;	author -;	state -;
branches;
next	1.11;

1.11
date	2016.03.23.23.37.18;	author -;	state -;
branches;
next	1.10;

1.10
date	2016.03.23.23.36.40;	author -;	state -;
branches;
next	1.9;

1.9
date	2016.03.23.23.36.13;	author -;	state -;
branches;
next	1.8;

1.8
date	2016.03.23.23.34.37;	author -;	state -;
branches;
next	1.7;

1.7
date	2016.03.23.23.34.22;	author -;	state -;
branches;
next	1.6;

1.6
date	2016.03.23.23.33.21;	author -;	state -;
branches;
next	1.5;

1.5
date	2016.03.23.23.31.39;	author -;	state -;
branches;
next	1.4;

1.4
date	2016.03.23.23.30.55;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.03.23.23.29.41;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.03.23.23.25.27;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.03.23.23.25.09;	author -;	state -;
branches;
next	;


desc
@@


1.52
log
@-
@
text
@// $Id: circles.cpp,v 1.51 2019-02-22 17:38:37-08 - - $

// Draw several ellipses in window.

#include <algorithm>
#include <cmath>
#include <iostream>
#include <string>
#include <unordered_map>
using namespace std;

#include <GL/freeglut.h>
#include <libgen.h>

// Characteristics of the window.
struct {
   string name;
   int width {512};
   int height {384};
} window;

struct rgbcolor { GLubyte ubv[3]; };
const unordered_map<string,rgbcolor> colors {
   {"red",     {0xFF, 0x00, 0x00}},
   {"green",   {0x00, 0xFF, 0x00}},
   {"blue",    {0x00, 0x00, 0xFF}},
   {"cyan",    {0x00, 0xFF, 0xFF}},
   {"magenta", {0xFF, 0x00, 0xFF}},
   {"yellow",  {0xFF, 0xFF, 0x00}},
   {"white",   {0xFF, 0xFF, 0xFF}},
   {"black",   {0x00, 0x00, 0x00}},
};

void draw_xy_graph (const rgbcolor& color) {
   glLineWidth (4);
   glBegin (GL_LINES);
   glColor3ubv (color.ubv);
   glVertex2f (-window.width / 2, 0);
   glVertex2f (+window.width / 2, 0);
   glVertex2f (0, -window.height);
   glVertex2f (0, +window.height);
   glEnd();
}


void draw_circle (const rgbcolor& color, size_t multiplier,
                  GLfloat radius) {
   glLineWidth (4);
   glBegin (GL_LINE_LOOP);
   glColor3ubv (color.ubv);
   const size_t points = multiplier * 4;
   const GLfloat theta = 2.0 * M_PI / points;
   for (size_t point = 0; point < points; ++point) {
      GLfloat angle = point * theta;
      GLfloat xpos = radius * cos (angle);
      GLfloat ypos = radius * sin (angle);
      glVertex2f (xpos, ypos);
   }
   glEnd();
}

// Called by glutMainLoop to display window contents.
void display() {
   cout << __PRETTY_FUNCTION__ << ":" << endl;
   glClearColor (0.25, 0.25, 0.25, 1.0);
   glClear (GL_COLOR_BUFFER_BIT);
   draw_xy_graph (colors.at("cyan"));
   const GLfloat radius = min (window.width, window.height) / 20.0;
   for (size_t count = 1; count <= 10; ++count) {
      draw_circle (colors.at("green"), count, radius * count);
   }
   glutSwapBuffers();
}

void reshape (int width, int height) {
   cout << __PRETTY_FUNCTION__ << ": "
        << width << ", " << height << endl;
   window.width = width;
   window.height = height;
   glMatrixMode (GL_PROJECTION);
   glLoadIdentity();
   gluOrtho2D (-window.width / 2, +window.width / 2,
               -window.height / 2, +window.height / 2);
   glMatrixMode (GL_MODELVIEW);
   glViewport (0, 0, window.width, window.height);
   glutPostRedisplay();
}


void close() {
   cout << __PRETTY_FUNCTION__ << ":" << endl;
}

void entry (int state) {
   cout << __PRETTY_FUNCTION__ << ": ";
   switch (state) {
      case GLUT_LEFT: cout << "GLUT_LEFT"; break;
      case GLUT_ENTERED: cout << "GLUT_ENTERED"; break;
      default: cout << state; break;
   }
   cout << endl;
}

int main (int argc, char** argv) {
   cout << __PRETTY_FUNCTION__ << ": "
        << argc << ", " << argv[0] << endl;
   window.name = basename (argv[0]);
   glutInit (&argc, argv);
   glutInitDisplayMode (GLUT_RGBA | GLUT_DOUBLE);
   glutInitWindowSize (window.width, window.height);
   glutInitWindowPosition (128, 128);
   glutCreateWindow (window.name.c_str());
   glutDisplayFunc (display);
   glutReshapeFunc (reshape);
   glutEntryFunc (entry);
   glutCloseFunc (close);
   glutMainLoop();
   return 0;
}

//TEST// mkpspdf circles.ps circles.cpp*

@


1.51
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.50 2019-02-22 17:34:28-08 - - $
d35 1
a35 1
   glLineWidth (1);
d48 1
a48 1
   glLineWidth (2);
@


1.50
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.49 2019-02-22 17:30:45-08 - - $
d121 2
a122 1
//TEST// mkpspdf circles.ps circles.cpp circles.cpp.log
@


1.49
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.48 2018-08-13 14:44:29-07 - - $
d45 1
d89 1
@


1.48
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.47 2018-08-13 14:44:19-07 - - $
d119 1
@


1.47
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.46 2018-08-13 14:44:08-07 - - $
d93 1
a93 1
   cout << __PRETTY_FUNCTION__ << ": "
@


1.46
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.45 2016-07-20 13:50:04-07 - - $
d104 1
a104 1
        << args << ", " << argv[0] << endl;
@


1.45
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.44 2016-04-28 16:11:53-07 - - $
d63 1
a63 1
   cout << __func__ << "()" << endl;
d75 2
a76 1
   cout << __func__ << "(" << width << "," << height << ")" << endl;
d89 1
a89 1
   cout << __func__ << "()" << endl;
d93 1
a93 1
   cout << __func__ << "(";
d99 1
a99 1
   cout << ")" << endl;
d103 2
@


1.44
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.43 2016-04-28 15:58:15-07 - - $
a115 1
//TEST// mkpspdf hello-gl.ps hello-gl.cpp*
@


1.43
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.42 2016-04-28 15:56:39-07 - - $
d68 1
a68 1
   for (size_t count = 1; count <= 8; ++count) {
@


1.42
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.41 2016-04-28 15:56:07-07 - - $
d67 1
a67 1
   const GLfloat minrad = min (window.width, window.height) / 16.0;
d69 1
a69 1
      draw_circle (colors.at("green"), count, minrad * count);
@


1.41
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.40 2016-04-28 15:53:14-07 - - $
d47 1
a47 1
   glLineWidth (4);
d67 2
a68 2
   const GLfloat minrad = min (window.width, window.height) / 12.0;
   for (size_t count = 1; count <= 6; ++count) {
@


1.40
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.39 2016-04-28 15:51:43-07 - - $
d67 4
a70 6
   const GLfloat minrad = min (window.width, window.height) / 10.0;
   draw_circle (colors.at("green"), 1, minrad * 1);
   draw_circle (colors.at("green"), 2, minrad * 2);
   draw_circle (colors.at("green"), 3, minrad * 3);
   draw_circle (colors.at("green"), 4, minrad * 4);
   draw_circle (colors.at("green"), 5, minrad * 5);
@


1.39
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.38 2016-04-28 15:50:19-07 - - $
d35 1
a35 1
   glLineWidth (2);
d67 1
a67 1
   const GLfloat minrad = min (window.width, window.height) / 8.0;
d72 1
@


1.38
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.37 2016-04-28 15:50:02-07 - - $
d84 1
a84 2
   glViewport (-window.width / 2, -window.height / 2,
               window.width, window.height);
@


1.37
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.36 2016-04-28 15:49:12-07 - - $
d84 1
a84 1
   glViewport (-window.width, -window.height,
@


1.36
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.35 2016-04-28 15:47:13-07 - - $
d84 1
a84 1
   glViewport (-window.width / 2, -window.height / 2,
@


1.35
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.34 2016-04-28 15:45:25-07 - - $
d85 1
a85 1
               +window.width / 2, +window.height / 2);
@


1.34
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.33 2016-04-28 15:43:24-07 - - $
d81 2
a82 1
   gluOrtho2D (0, window.width, 0, window.height);
@


1.33
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.32 2016-04-28 15:42:47-07 - - $
d83 2
a84 2
//   glViewport (-window.width / 2, -window.height / 2,
//               +window.width / 2, +window.height / 2);
@


1.32
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.31 2016-04-28 15:40:38-07 - - $
d81 1
a81 2
   gluOrtho2D (-window.width / 2, -window.height / 2,
               +window.width / 2, +window.height / 2);
@


1.31
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.30 2016-04-28 15:40:23-07 - - $
d84 2
a85 2
   glViewport (-window.width / 2, -window.height / 2,
               +window.width / 2, +window.height / 2);
@


1.30
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.29 2016-04-28 15:39:32-07 - - $
d84 2
a85 2
//   glViewport (-window.width / 2, -window.height / 2,
//               +window.width / 2, +window.height / 2);
@


1.29
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.28 2016-04-28 15:39:16-07 - - $
d81 2
a82 2
   glOrtho2D (-window.width / 2, -window.height / 2,
              +window.width / 2, +window.height / 2);
d84 2
a85 2
   glViewport (-window.width / 2, -window.height / 2,
               +window.width / 2, +window.height / 2);
@


1.28
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.27 2016-04-28 15:36:13-07 - - $
d84 2
a85 2
//   glViewport (-window.width / 2, -window.height / 2,
//               +window.width / 2, +window.height / 2);
@


1.27
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.26 2016-04-28 15:35:13-07 - - $
d81 2
a82 1
   glOrtho (0, window.width, 0, window.height, -1, +1);
d84 2
a85 2
   glViewport (-window.width / 2, -window.height / 2,
               +window.width / 2, +window.height / 2);
@


1.26
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.25 2016-04-28 15:33:52-07 - - $
d83 2
a84 1
   //glViewport (0, 0, window.width, window.height);
@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.24 2016-04-28 15:33:18-07 - - $
d81 1
a81 1
   //glOrtho (0, window.width, 0, window.height, -1, +1);
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.23 2016-04-28 15:32:48-07 - - $
d54 2
a55 2
      GLfloat xpos = radius * cos (angle) + window.width / 2;
      GLfloat ypos = radius * sin (angle) + window.height / 2;
@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.22 2016-04-28 15:31:52-07 - - $
d81 1
a81 1
   glOrtho (0, window.width, 0, window.height, -1, +1);
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.21 2016-04-28 15:30:59-07 - - $
d83 1
a83 1
   glViewport (0, 0, window.width, window.height);
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.20 2016-04-28 15:30:45-07 - - $
d38 2
a39 2
   glVertex2f (-window.width, 0);
   glVertex2f (+window.width, 0);
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.19 2016-04-28 15:22:56-07 - - $
d50 1
a50 1
   const points = multiplier * 4;
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.18 2016-04-28 15:20:30-07 - - $
d34 11
d47 1
d66 1
a66 1
   glLineWidth (4);
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.17 2016-04-28 15:19:33-07 - - $
d34 1
a34 1
void draw_circle (const rgbcolor& color, size_t points,
d38 1
d56 4
a59 4
   draw_circle (colors.at("green"), 4, minrad);
   draw_circle (colors.at("green"), 8, minrad * 2);
   draw_circle (colors.at("green"), 16, minrad * 3);
   draw_circle (colors.at("green"), 32, minrad * 4);
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.16 2016-04-28 15:16:53-07 - - $
d54 5
a58 5
   const GLfloat minradius = min (window.width, window.height) / 6.0;
   draw_circle (colors.at("green"), 4, minradius);
   draw_circle (colors.at("green"), 8, minradius * 2);
   draw_circle (colors.at("green"), 16, minradius * 3);
   draw_circle (colors.at("green"), 32, minradius * 4);
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.15 2016-03-23 16:41:18-07 - - $
d34 2
a35 1
void draw_circle (const rgbcolor& color, size_t points) {
a38 1
   const GLfloat radius = min (window.width, window.height) / 3.0;
d54 5
a58 4
   draw_circle (colors.at("green"), 4);
   draw_circle (colors.at("green"), 8);
   draw_circle (colors.at("green"), 16);
   draw_circle (colors.at("green"), 32);
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.14 2016-03-23 16:40:36-07 - - $
d54 4
a57 4
   draw_circle (colors.at("black"), 4);
   draw_circle (colors.at("black"), 8);
   draw_circle (colors.at("black"), 16);
   draw_circle (colors.at("black"), 32);
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.11 2016-03-23 16:37:18-07 - - $
d35 1
a35 1
   glBegin (GL_POLYGON);
a39 1
cout << point << endl;
d55 3
@


1.13
log
@-
@
text
@d42 2
a43 2
      GLfloat xpos = radius * cos (theta) + window.width / 2;
      GLfloat ypos = radius * sin (theta) + window.height / 2;
@


1.12
log
@-
@
text
@d37 1
d41 1
a41 1
      GLfloat theta = 2.0 * M_PI / points;
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.10 2016-03-23 16:36:40-07 - - $
d39 1
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.8 2016-03-23 16:34:37-07 - - $
d34 1
a34 1
void draw_circle (const GLubyte* color, size_t points) {
d36 1
a36 1
   glColor3ubv (color);
@


1.9
log
@-
@
text
@d24 8
a31 8
   {"red",     rgbcolor (0xFF, 0x00, 0x00)},
   {"green",   rgbcolor (0x00, 0xFF, 0x00)},
   {"blue",    rgbcolor (0x00, 0x00, 0xFF)},
   {"cyan",    rgbcolor (0x00, 0xFF, 0xFF)},
   {"magenta", rgbcolor (0xFF, 0x00, 0xFF)},
   {"yellow",  rgbcolor (0xFF, 0xFF, 0x00)},
   {"white",   rgbcolor (0xFF, 0xFF, 0xFF)},
   {"black",   rgbcolor (0x00, 0x00, 0x00)},
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.7 2016-03-23 16:34:22-07 - - $
d23 1
a23 1
const unordered_map<string,GLubyte*> colors {
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.5 2016-03-23 16:31:39-07 - - $
d24 8
a31 8
   {"red",     rgbcolor (0xFF, 0x00, 0x00)],
   {"green",   rgbcolor (0x00, 0xFF, 0x00)],
   {"blue",    rgbcolor (0x00, 0x00, 0xFF)],
   {"cyan",    rgbcolor (0x00, 0xFF, 0xFF)],
   {"magenta", rgbcolor (0xFF, 0x00, 0xFF)],
   {"yellow",  rgbcolor (0xFF, 0xFF, 0x00)],
   {"white",   rgbcolor (0xFF, 0xFF, 0xFF)],
   {"black",   rgbcolor (0x00, 0x00, 0x00)],
@


1.6
log
@-
@
text
@d24 8
a31 8
   {"red",     {0xFF, 0x00, 0x00}},
   {"green",   {0x00, 0xFF, 0x00}},
   {"blue",    {0x00, 0x00, 0xFF}},
   {"cyan",    {0x00, 0xFF, 0xFF}},
   {"magenta", {0xFF, 0x00, 0xFF}},
   {"yellow",  {0xFF, 0xFF, 0x00}},
   {"white",   {0xFF, 0xFF, 0xFF}},
   {"black",   {0x00, 0x00, 0x00}},
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.3 2016-03-23 16:29:41-07 - - $
d22 1
@


1.4
log
@-
@
text
@d22 1
a22 1
const unordered_map<string,GLubyte[3]> colors {
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.2 2016-03-23 16:25:27-07 - - $
d22 1
a22 1
const unordered_map<string,GLubyte[]> colors {
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: circles.cpp,v 1.1 2016-03-23 16:25:09-07 - - $
d5 1
d16 1
a16 1
struct window {
d36 5
a40 6
   const GLfloat delta = 2 * M_PI / 32;
   GLfloat width = window.width / 3 * scale;
   GLfloat height = window.height / 3 * scale;
   for (GLfloat theta = 0; theta < 2 * M_PI; theta += delta) {
      GLfloat xpos = width * cos (theta) + window.width / 2;
      GLfloat ypos = height * sin (theta) + window.height / 2;
d52 1
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: ellipses.cpp,v 1.9 2016-02-17 14:57:33-08 - - $
d21 1
a21 1
const unordered_map<string,GLubyte[]> {
@
