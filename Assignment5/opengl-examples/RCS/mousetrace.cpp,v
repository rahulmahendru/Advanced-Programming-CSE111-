head	1.66;
access;
symbols;
locks;
comment	@// @;


1.66
date	2019.02.23.01.38.43;	author -;	state -;
branches;
next	1.65;

1.65
date	2019.02.23.01.36.05;	author -;	state -;
branches;
next	1.64;

1.64
date	2019.02.23.01.35.30;	author -;	state -;
branches;
next	1.63;

1.63
date	2019.02.23.01.30.51;	author -;	state -;
branches;
next	1.62;

1.62
date	2018.08.21.22.25.56;	author -;	state -;
branches;
next	1.61;

1.61
date	2018.08.21.22.25.21;	author -;	state -;
branches;
next	1.60;

1.60
date	2018.08.17.22.50.37;	author -;	state -;
branches;
next	1.59;

1.59
date	2018.08.17.22.49.04;	author -;	state -;
branches;
next	1.58;

1.58
date	2018.08.17.22.48.26;	author -;	state -;
branches;
next	1.57;

1.57
date	2018.08.17.22.32.42;	author -;	state -;
branches;
next	1.56;

1.56
date	2018.08.17.22.32.19;	author -;	state -;
branches;
next	1.55;

1.55
date	2018.08.17.22.31.40;	author -;	state -;
branches;
next	1.54;

1.54
date	2018.08.17.22.17.08;	author -;	state -;
branches;
next	1.53;

1.53
date	2018.08.17.22.15.34;	author -;	state -;
branches;
next	1.52;

1.52
date	2018.08.17.22.14.47;	author -;	state -;
branches;
next	1.51;

1.51
date	2018.08.17.22.13.57;	author -;	state -;
branches;
next	1.50;

1.50
date	2018.08.17.22.13.38;	author -;	state -;
branches;
next	1.49;

1.49
date	2018.08.17.22.12.50;	author -;	state -;
branches;
next	1.48;

1.48
date	2018.08.17.22.10.20;	author -;	state -;
branches;
next	1.47;

1.47
date	2018.08.17.22.08.44;	author -;	state -;
branches;
next	1.46;

1.46
date	2018.08.17.22.07.54;	author -;	state -;
branches;
next	1.45;

1.45
date	2018.08.17.22.06.45;	author -;	state -;
branches;
next	1.44;

1.44
date	2018.08.17.22.02.29;	author -;	state -;
branches;
next	1.43;

1.43
date	2018.08.17.21.58.31;	author -;	state -;
branches;
next	1.42;

1.42
date	2018.08.17.21.57.48;	author -;	state -;
branches;
next	1.41;

1.41
date	2018.08.17.21.56.40;	author -;	state -;
branches;
next	1.40;

1.40
date	2018.08.17.21.55.29;	author -;	state -;
branches;
next	1.39;

1.39
date	2018.08.17.21.54.37;	author -;	state -;
branches;
next	1.38;

1.38
date	2018.08.17.21.52.10;	author -;	state -;
branches;
next	1.37;

1.37
date	2018.08.17.21.48.21;	author -;	state -;
branches;
next	1.36;

1.36
date	2018.08.17.21.45.40;	author -;	state -;
branches;
next	1.35;

1.35
date	2018.08.17.21.43.56;	author -;	state -;
branches;
next	1.34;

1.34
date	2018.08.17.21.43.16;	author -;	state -;
branches;
next	1.33;

1.33
date	2018.08.17.21.43.04;	author -;	state -;
branches;
next	1.32;

1.32
date	2018.08.17.21.42.21;	author -;	state -;
branches;
next	1.31;

1.31
date	2018.08.17.21.41.41;	author -;	state -;
branches;
next	1.30;

1.30
date	2018.08.17.20.44.29;	author -;	state -;
branches;
next	1.29;

1.29
date	2018.08.15.20.11.32;	author -;	state -;
branches;
next	1.28;

1.28
date	2018.08.15.20.10.57;	author -;	state -;
branches;
next	1.27;

1.27
date	2018.08.15.20.10.40;	author -;	state -;
branches;
next	1.26;

1.26
date	2018.08.15.20.09.21;	author -;	state -;
branches;
next	1.25;

1.25
date	2018.08.13.23.50.39;	author -;	state -;
branches;
next	1.24;

1.24
date	2018.08.13.23.48.11;	author -;	state -;
branches;
next	1.23;

1.23
date	2018.08.13.23.47.59;	author -;	state -;
branches;
next	1.22;

1.22
date	2018.08.13.23.47.40;	author -;	state -;
branches;
next	1.21;

1.21
date	2018.08.13.23.47.17;	author -;	state -;
branches;
next	1.20;

1.20
date	2018.08.13.23.38.52;	author -;	state -;
branches;
next	1.19;

1.19
date	2018.08.13.23.38.19;	author -;	state -;
branches;
next	1.18;

1.18
date	2018.08.13.23.38.06;	author -;	state -;
branches;
next	1.17;

1.17
date	2018.08.13.23.37.15;	author -;	state -;
branches;
next	1.16;

1.16
date	2018.08.13.23.36.50;	author -;	state -;
branches;
next	1.15;

1.15
date	2018.08.13.23.34.38;	author -;	state -;
branches;
next	1.14;

1.14
date	2018.08.13.23.34.14;	author -;	state -;
branches;
next	1.13;

1.13
date	2018.08.13.23.33.57;	author -;	state -;
branches;
next	1.12;

1.12
date	2018.08.13.23.33.31;	author -;	state -;
branches;
next	1.11;

1.11
date	2018.08.13.23.33.20;	author -;	state -;
branches;
next	1.10;

1.10
date	2018.08.13.23.32.33;	author -;	state -;
branches;
next	1.9;

1.9
date	2018.08.13.23.32.05;	author -;	state -;
branches;
next	1.8;

1.8
date	2018.08.13.23.28.53;	author -;	state -;
branches;
next	1.7;

1.7
date	2018.08.13.23.26.13;	author -;	state -;
branches;
next	1.6;

1.6
date	2018.08.13.23.11.06;	author -;	state -;
branches;
next	1.5;

1.5
date	2018.08.13.23.09.46;	author -;	state -;
branches;
next	1.4;

1.4
date	2018.08.13.23.05.32;	author -;	state -;
branches;
next	1.3;

1.3
date	2018.08.13.23.05.14;	author -;	state -;
branches;
next	1.2;

1.2
date	2018.08.13.23.04.58;	author -;	state -;
branches;
next	1.1;

1.1
date	2018.08.13.22.12.09;	author -;	state -;
branches;
next	;


desc
@@


1.66
log
@-
@
text
@// $Id: mousetrace.cpp,v 1.65 2019-02-22 17:36:05-08 - - $

#include <cmath>
#include <iostream>
#include <string>
using namespace std;

#include <GL/freeglut.h>
#include <libgen.h>

struct window {
   string name;
   int width {256};
   int height {192};
} window;

template <typename number>
struct coordinate {
   number x_coord {};
   number y_coord {};
   string to_string() {
      return "(" + std::to_string (x_coord) + ","
                 + std::to_string (y_coord) + ")";
   }
};

const GLubyte RED[]    {0xFF, 0x00, 0x00};
const GLubyte YELLOW[] {0xFF, 0xFF, 0x00};
const GLubyte GREEN[]  {0x00, 0xFF, 0x00};
const GLubyte WHITE[]  {0xFF, 0xFF, 0xFF};


struct mouse {
   int entered {GLUT_LEFT};
   coordinate<int> coord;
   struct { int left; int middle; int right; } state
        = { GLUT_UP,  GLUT_UP,    GLUT_UP    };
   bool mouse_down() {
      if (entered == GLUT_LEFT) return false;
      return state.left == GLUT_DOWN
          or state.middle == GLUT_DOWN
          or state.right == GLUT_DOWN;
   }
   string to_string() {
      return coord.to_string()
           + (state.left == GLUT_DOWN ? "L" : "")
           + (state.middle == GLUT_DOWN ? "M" : "")
           + (state.right == GLUT_DOWN ? "R" : ""); 
   }
   void draw() {
      if (entered == GLUT_LEFT) return;
      void* font = GLUT_BITMAP_9_BY_15;
      glColor3ubv (WHITE);
      glRasterPos2i (5, 5);
      glutBitmapString (font,
                        reinterpret_cast<const GLubyte*>
                        (to_string().c_str()));
   }
} mouse;


struct ellipse {
   coordinate<GLfloat> coord;
   const GLubyte* color;
   ellipse() { coord.x_coord = window.width / 2;
               coord.y_coord = window.height / 2;
             }
   inline GLfloat width() const { return window.width / 10; }
   inline GLfloat height() const { return window.height / 10; }
   bool has_mouse() {
      if (mouse.entered == GLUT_LEFT) return false;
      GLfloat delta_x = mouse.coord.x_coord - coord.x_coord;
      GLfloat delta_y = mouse.coord.y_coord - coord.y_coord;
      return pow (delta_x, 2) / pow (width(), 2)
           + pow (delta_y, 2) / pow (height(), 2) <= 1;
   }
   void set_color_coord() {
      if (not has_mouse()) {
         color = GREEN;
      }else if (not mouse.mouse_down()) {
         color = YELLOW;
      }else {
         color = RED;
         coord.x_coord = mouse.coord.x_coord;
         coord.y_coord = mouse.coord.y_coord;
      }
   }
   void draw() {
      set_color_coord();
      glBegin (GL_POLYGON);
      glColor3ubv (color);
      GLfloat delta = 2 * M_PI / 64;
      for (GLfloat theta = 0; theta < 2 * M_PI; theta += delta) {
         GLfloat x = width() * cos (theta) + coord.x_coord;
         GLfloat y = height() * sin (theta) + coord.y_coord;
         glVertex2f (x, y);
      }
      glEnd();
   }
} ellipse;


void display_func() {
   glClear (GL_COLOR_BUFFER_BIT);
   ellipse.draw();
   mouse.draw();
   glutSwapBuffers();
}

void reshape_func (int width, int height) {
   window.width = width;
   window.height = height;
   glMatrixMode (GL_PROJECTION);
   glLoadIdentity();
   gluOrtho2D (0, window.width, 0, window.height);
   glMatrixMode (GL_MODELVIEW);
   glViewport (0, 0, window.width, window.height);
   glClearColor (0.25, 0.25, 0.25, 1.0);
   glutPostRedisplay();
}

void mouse_func (int button, int state, int mouse_x, int mouse_y) {
   mouse.coord = {mouse_x, window.height - mouse_y};
   switch (button) {
      case GLUT_LEFT_BUTTON: mouse.state.left = state; break;
      case GLUT_MIDDLE_BUTTON: mouse.state.middle = state; break;
      case GLUT_RIGHT_BUTTON: mouse.state.right = state; break;
   }
   glutPostRedisplay();
}

void entry_func (int entered) {
   mouse.entered = entered;
   glutPostRedisplay();
}

void motion_func (int mouse_x, int mouse_y) {
   mouse.coord = {mouse_x, window.height - mouse_y};
   glutPostRedisplay();
}

void passivemotion_func (int mouse_x, int mouse_y) {
   mouse.coord = {mouse_x, window.height - mouse_y};
   glutPostRedisplay();
}


int main (int argc, char** argv) {
   window.name = basename (argv[0]);
   glutInit (&argc, argv);
   glutInitDisplayMode (GLUT_RGBA | GLUT_DOUBLE);
   glutInitWindowSize (window.width, window.height);
   glutCreateWindow (window.name.c_str());
   glutDisplayFunc (display_func);
   glutReshapeFunc (reshape_func);
   glutMouseFunc (mouse_func);
   glutMotionFunc (motion_func);
   glutEntryFunc (entry_func);
   glutPassiveMotionFunc (passivemotion_func);
   glutMainLoop();
   return 0;
}

//TEST// mkpspdf mousetrace.ps mousetrace.cpp*

@


1.65
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.64 2019-02-22 17:35:30-08 - - $
d164 2
a165 1
//TEST// mkpspdf mousetrace.ps mousetrace.cpp
@


1.64
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.63 2019-02-22 17:30:51-08 - - $
d147 1
@


1.63
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.62 2018-08-21 15:25:56-07 - - $
d32 1
d61 1
d102 1
@


1.62
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.61 2018-08-21 15:25:21-07 - - $
d160 1
@


1.61
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.60 2018-08-17 15:50:37-07 - - $
d51 1
a51 1
      void* font = GLUT_BITMAP_HELVETICA_18;
@


1.60
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.59 2018-08-17 15:49:04-07 - - $
d51 1
a51 1
      void* font = GLUT_BITMAP_HELVETICA_12;
@


1.59
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.58 2018-08-17 15:48:26-07 - - $
d51 1
a51 1
      void* font = GLUT_BITMAP_HELVETICA_18;
@


1.58
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.57 2018-08-17 15:32:42-07 - - $
d51 1
a51 1
      void* font = GLUT_BITMAP_HELVETICA_12;
@


1.57
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.56 2018-08-17 15:32:19-07 - - $
d51 1
a51 1
      void* font = GLUT_BITMAP_HELVETICA_10;
@


1.56
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.55 2018-08-17 15:31:40-07 - - $
d82 2
a83 2
         coord.x_coord = mouse.x_coord;
         coord.y_coord = mouse.y_coord;
@


1.55
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.54 2018-08-17 15:17:08-07 - - $
d62 1
a62 1
   const GLUbyte* color;
@


1.54
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.53 2018-08-17 15:15:34-07 - - $
d27 4
a30 5
struct color { GLubyte rgb[3]; };
const color RED    {0xFF, 0x00, 0x00};
const color YELLOW {0xFF, 0xFF, 0x00};
const color GREEN  {0x00, 0xFF, 0x00};
const color WHITE  {0xFF, 0xFF, 0xFF};
d52 1
a52 1
      glColor3ubv (WHITE.rgb);
d62 1
d75 10
a84 3
   const GLubyte* rgb() {
      if (not has_mouse()) return GREEN.rgb;
      return mouse.mouse_down() ? RED.rgb : YELLOW.rgb;
d87 1
d89 1
a89 1
      glColor3ubv (rgb());
@


1.53
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.52 2018-08-17 15:14:47-07 - - $
d62 4
a65 1
   coordinate<GLfloat> coord (window.width / 2.0, window.height / 2.0);
@


1.52
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.51 2018-08-17 15:13:57-07 - - $
d62 1
a62 1
   coordinate<GLfloat> coord {window.width / 2.0, window.height / 2.0};
@


1.51
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.50 2018-08-17 15:13:38-07 - - $
d11 1
a11 1
struct {
d62 1
a62 1
   coordinate<GLfloat> coord (window.width / 2, window.height / 2);
@


1.50
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.49 2018-08-17 15:12:50-07 - - $
d11 1
a11 1
struct window {
@


1.49
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.48 2018-08-17 15:10:20-07 - - $
d11 1
a11 1
struct {
d62 1
a62 1
   coordinate<GLfloat> coord {window.width / 2, window.height / 2};
@


1.48
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.47 2018-08-17 15:08:44-07 - - $
d62 1
a62 1
   coordinate<GLfloat> coord;
a124 2
   ellipse.coord.x_coord = mouse.coord.x_coord;
   ellipse.coord.y_coord = mouse.coord.y_coord;
@


1.47
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.45 2018-08-17 15:06:45-07 - - $
d125 2
a126 1
   ellipse.coord = {mouse.coord.x_coord, mouse.coord.y_coord};
@


1.46
log
@-
@
text
@d125 1
a125 1
   ellipse.coord = mouse.coord;
@


1.45
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.44 2018-08-17 15:02:29-07 - - $
d125 1
@


1.44
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.43 2018-08-17 14:58:31-07 - - $
d78 1
a78 1
      glColor3ubv (color().rgb);
@


1.43
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.42 2018-08-17 14:57:48-07 - - $
d72 3
a74 3
   const color color() {
      if (not has_mouse()) return GREEN;
      return mouse.mouse_down() ? RED : YELLOW;
@


1.42
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.41 2018-08-17 14:56:40-07 - - $
d72 1
a72 1
   color& color() {
@


1.41
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.40 2018-08-17 14:55:29-07 - - $
d72 1
a72 1
   const color& color() {
@


1.40
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.39 2018-08-17 14:54:37-07 - - $
d9 1
@


1.39
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.38 2018-08-17 14:52:10-07 - - $
a8 1
#include <libgen.h>
@


1.38
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.37 2018-08-17 14:48:21-07 - - $
d40 1
a40 1
      return state.left   == GLUT_DOWN
d42 1
a42 1
          or state.right  == GLUT_DOWN;
d46 1
a46 1
           + (state.left   == GLUT_DOWN ? "L" : "")
d48 1
a48 1
           + (state.right  == GLUT_DOWN ? "R" : ""); 
d111 1
a111 1
      case GLUT_LEFT_BUTTON  : mouse.state.left   = state; break;
d113 1
a113 1
      case GLUT_RIGHT_BUTTON : mouse.state.right  = state; break;
@


1.37
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.36 2018-08-17 14:45:40-07 - - $
d22 2
a23 2
      return "(" + to_string (x_coord) + ","
                 + to_string (y_coord) + ")";
@


1.36
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.35 2018-08-17 14:43:56-07 - - $
d89 1
a89 1
void display() {
d96 1
a96 1
void reshape (int width, int height) {
d108 1
a108 1
void mouse (int button, int state, int mouse_x, int mouse_y) {
d118 1
a118 1
void entry (int entered) {
d123 1
a123 1
void motion (int mouse_x, int mouse_y) {
d128 1
a128 1
void passivemotion (int mouse_x, int mouse_y) {
d139 6
a144 6
   glutDisplayFunc (display);
   glutReshapeFunc (reshape);
   glutMouseFunc (mouse);
   glutMotionFunc (motion);
   glutEntryFunc (entry);
   glutPassiveMotionFunc (passivemotion);
@


1.35
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.34 2018-08-17 14:43:16-07 - - $
a104 2
   ellipse.xpos = window.width / 2;
   ellipse.ypos = window.height / 2;
@


1.34
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.31 2018-08-17 14:41:41-07 - - $
d5 1
a5 1
#include <sstream>
@


1.33
log
@-
@
text
@d45 1
a45 1
      return coord.to_string
@


1.32
log
@-
@
text
@d36 2
a37 2
   struct state { int left; int middle; int right; }
              = { GLUT_UP,  GLUT_UP,    GLUT_UP    };
@


1.31
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.30 2018-08-17 13:44:29-07 - - $
d81 2
a82 2
         GLfloat x = width() * cos (theta) + xpos;
         GLfloat y = height() * sin (theta) + ypos;
@


1.30
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.29 2018-08-15 13:11:32-07 - - $
d21 4
d33 1
a33 1
struct mouse_position {
d36 14
a49 3
   int left_state {GLUT_UP};
   int middle_state {GLUT_UP};
   int right_state {GLUT_UP};
a51 5
      ostringstream position;
      position << "(" << coord.x_coord << "," << coord.y_coord << ")";
      if (left_state == GLUT_DOWN) position << "L"; 
      if (middle_state == GLUT_DOWN) position << "M"; 
      if (right_state == GLUT_DOWN) position << "R"; 
d57 1
a57 1
                        (position.str().c_str()));
d63 13
a75 4
   color rgb {GREEN};
   bool selected {false};
   GLfloat width() const { return window.width / 10; }
   GLfloat height() const { return window.height / 10; }
d78 1
a78 1
      glColor3ubv (rgb.rgb);
a86 6
   bool has_mouse() {
      GLfloat delta_x = mouse.coord.x_coord - coord.x_coord;
      GLfloat delta_y = mouse.coord.y_coord - coord.y_coord;
      return pow (delta_x, 2) / pow (width(), 2)
           + pow (delta_y, 2) / pow (height(), 2) <= 1;
   }
a106 1
   ellipse.rgb = GREEN;
d111 1
d113 3
a115 3
      case GLUT_LEFT_BUTTON: mouse.left_state = state; break;
      case GLUT_MIDDLE_BUTTON: mouse.middle_state = state; break;
      case GLUT_RIGHT_BUTTON: mouse.right_state = state; break;
a126 10
   ellipse.rgb = GREEN;
   if (ellipse.has_mouse (mouse_x, mouse_y)) {
      ellipse.rgb = RED;
      ellipse.xpos = mouse_x;
      ellipse.ypos = window.height - mouse_y;
      if (ellipse.xpos < 0) ellipse.xpos = window.width;
      if (ellipse.xpos > window.width) ellipse.xpos = 0;
      if (ellipse.ypos < 0) ellipse.ypos = window.height;
      if (ellipse.ypos > window.height) ellipse.ypos = 0;
   }
a131 1
   ellipse.rgb = ellipse.has_mouse (mouse_x, mouse_y)) ? YELLOW : GREEN;
@


1.29
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.28 2018-08-15 13:10:57-07 - - $
d17 5
a21 6
struct {
   int entered {GLUT_LEFT};
   int left_state {GLUT_UP};
   int middle_state {GLUT_UP};
   int right_state {GLUT_UP};
} mouse_obj;
a23 6
ostream& operator<< (ostream& out, const color& rgb) {
   return out << "{" << unsigned (rgb.rgb[0]) << ","
                     << unsigned (rgb.rgb[1]) << ","
                     << unsigned (rgb.rgb[2]) << "}";
}

d29 22
d52 1
a52 2
   GLfloat xpos {0};
   GLfloat ypos {0};
d57 1
a57 3
   void draw_ellipse() {
      cout << __PRETTY_FUNCTION__ << ": x=" << xpos << ", y=" << ypos 
           << ", rgb=" << rgb << endl;
d68 3
a70 20
   void show_mouse_pos() {
      if (mouse_obj.entered == GLUT_LEFT) return;
      ostringstream title;
      title << "(" << xpos << "," << ypos << ")";
      if (mouse_obj.left_state == GLUT_DOWN) title << "L"; 
      if (mouse_obj.middle_state == GLUT_DOWN) title << "M"; 
      if (mouse_obj.right_state == GLUT_DOWN) title << "R"; 
      void* font = GLUT_BITMAP_HELVETICA_10;
      glColor3ubv (WHITE.rgb);
      glRasterPos2i (5, 5);
      glutBitmapString (font,
            reinterpret_cast<const GLubyte*> (title.str().c_str()));
   }
   void draw() {
      draw_ellipse();
      show_mouse_pos();
   }
   bool has_mouse (int mouse_x, int mouse_y) {
      GLfloat delta_x = mouse_x - xpos;
      GLfloat delta_y = (window.height - mouse_y) - ypos;
a76 1
   cout << __PRETTY_FUNCTION__ << ":" << endl;
d79 1
a83 2
   cout << __PRETTY_FUNCTION__ << ": "
        << width << "," << height << endl;
a98 3
   cout << __PRETTY_FUNCTION__ << ": "
        << button << "," << state << "," << mouse_x
        << "," << mouse_y << endl;
d100 3
a102 3
      case GLUT_LEFT_BUTTON: mouse_obj.left_state = state; break;
      case GLUT_MIDDLE_BUTTON: mouse_obj.middle_state = state; break;
      case GLUT_RIGHT_BUTTON: mouse_obj.right_state = state; break;
d108 1
a108 2
   cout << __PRETTY_FUNCTION__ << ": " << entered << endl;
   mouse_obj.entered = entered;
d113 1
a113 2
   cout << __PRETTY_FUNCTION__ << ": "
        << mouse_x << "," << mouse_y << endl;
d128 2
a129 4
   cout << __PRETTY_FUNCTION__ << ": "
        << mouse_x << "," << mouse_y << endl;
   ellipse.rgb = GREEN;
   if (ellipse.has_mouse (mouse_x, mouse_y)) ellipse.rgb = YELLOW;
@


1.28
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.27 2018-08-15 13:10:40-07 - - $
d43 1
a43 1
   void draw() {
d70 1
a70 1
      draw();
@


1.27
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.26 2018-08-15 13:09:21-07 - - $
d43 1
a43 1
   draw() {
@


1.26
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.25 2018-08-13 16:50:39-07 - - $
d43 1
a43 1
   void ellipse() {
d56 1
a56 1
   void mouse_pos() {
d70 2
a71 2
      ellipse();
      mouse_pos();
@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.24 2018-08-13 16:48:11-07 - - $
d36 1
a36 1
struct {
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.23 2018-08-13 16:47:59-07 - - $
d34 1
a42 13
   void mouse_pos() {
      if (mouse_obj.entered == GLUT_LEFT) return;
      ostringstream title;
      title << "(" << xpos << "," << ypos << ")";
      if (mouse_obj.left_state == GLUT_DOWN) title << "L"; 
      if (mouse_obj.middle_state == GLUT_DOWN) title << "M"; 
      if (mouse_obj.right_state == GLUT_DOWN) title << "R"; 
      void* font = GLUT_BITMAP_HELVETICA_10;
      glColor3ubv (GREEN.rgb);
      glRasterPos2i (10, 10);
      glutBitmapString (font,
            reinterpret_cast<const GLubyte*> (title.str().c_str()));
   }
d56 13
d70 1
a71 1
      ellipse();
@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.22 2018-08-13 16:47:40-07 - - $
d125 1
a125 1
   ellipse.rgb = GREEN.rgb;
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.21 2018-08-13 16:47:17-07 - - $
d141 1
a141 1
   ellipse.rgb = GREEN.rgb;
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.20 2018-08-13 16:38:52-07 - - $
d100 1
a100 1
   ellipse.rgb = GREEN.rgb;
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.19 2018-08-13 16:38:19-07 - - $
d53 1
a53 1
            reinterpret_cast<const GLubyte*> (title.str().c_str());
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.18 2018-08-13 16:38:06-07 - - $
d50 1
a50 1
      glColor3ubv (GREEN);
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.17 2018-08-13 16:37:15-07 - - $
d100 1
a100 1
   ellipse.rgb = GREEN.rgn;
d125 1
a125 1
   ellipse.rgb = GREEN.rgn;
d141 1
a141 1
   ellipse.rgb = GREEN.rgn;
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.16 2018-08-13 16:36:50-07 - - $
d100 1
a100 1
   ellipse.rgb = GREEN;
d125 1
a125 1
   ellipse.rgb = GREEN;
d141 1
a141 1
   ellipse.rgb = GREEN;
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.15 2018-08-13 16:34:38-07 - - $
d44 5
a48 5
      ostringstream label;
      text << "(" << xpos << "," << ypos << ")";
      if (mouse_obj.left_state == GLUT_DOWN) text << "L"; 
      if (mouse_obj.middle_state == GLUT_DOWN) text << "M"; 
      if (mouse_obj.right_state == GLUT_DOWN) text << "R"; 
d53 1
a53 1
            reinterpret_cast<const GLubyte*> (label.str().c_str());
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.14 2018-08-13 16:34:14-07 - - $
d44 1
a44 1
      ostringstream text;
d53 1
a53 1
                  reinterpret_cast<const GLubyte*> (text.str().c_str());
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.13 2018-08-13 16:33:57-07 - - $
d53 1
a53 1
                  reinterpret_cast<const GLubyte*> (text.str());
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.12 2018-08-13 16:33:31-07 - - $
d53 1
a53 1
                  reinterpret_cast<const GLubyte*> (text.c_str());
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.11 2018-08-13 16:33:20-07 - - $
d5 1
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.10 2018-08-13 16:32:33-07 - - $
d48 1
a48 1
      void* font = GLUT_BITMAP_HELVETICA_10
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.9 2018-08-13 16:32:05-07 - - $
d21 1
a21 1
} mouse;
d42 1
a42 1
      if (mouse.entered == GLUT_LEFT) return;
d45 3
a47 3
      if (mouse.left_state == GLUT_DOWN) text << "L"; 
      if (mouse.middle_state == GLUT_DOWN) text << "M"; 
      if (mouse.right_state == GLUT_DOWN) text << "R"; 
d108 3
a110 3
      case GLUT_LEFT_BUTTON: mouse.left_state = state; break;
      case GLUT_MIDDLE_BUTTON: mouse.middle_state = state; break;
      case GLUT_RIGHT_BUTTON: mouse.right_state = state; break;
d117 1
a117 1
   mouse.entered = entered;
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.8 2018-08-13 16:28:53-07 - - $
d108 3
a110 3
      case GLUT_LEFT_BUTTON: left_state = state; break;
      case GLUT_MIDDLE_BUTTON: middle_state = state; break;
      case GLUT_RIGHT_BUTTON: right_state = state; break;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.7 2018-08-13 16:26:13-07 - - $
d107 5
a111 1
   window.mouse_state = state;
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.6 2018-08-13 16:11:06-07 - - $
a13 2
   int mouse_state {GLUT_UP};
   int mouse_entered {GLUT_LEFT};
d16 7
d42 1
a42 1
      if (window.mouse_entered == GLUT_LEFT) return;
d45 3
a47 3
      if (left_state == GLUT_DOWN) text << "L"; 
      if (middle_state == GLUT_DOWN) text << "M"; 
      if (right_state == GLUT_DOWN) text << "R"; 
d113 1
a113 1
   window.mouse_entered = entered;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.5 2018-08-13 16:09:46-07 - - $
d15 1
d36 14
a49 1
   void draw() {
d62 4
d106 6
d146 1
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.4 2018-08-13 16:05:32-07 - - $
d51 2
a52 2
      return sqr (delta_x) / sqr (width())
           + sqr (delta_y) / sqr (height()) <= 1;
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.3 2018-08-13 16:05:14-07 - - $
d49 4
a52 5
      GLfloat x_dist = xpos - mouse_x;
      GLfloat y_dist = ypos - (window.height - mouse_y);
      GLfloat x_delta = pow (xpos - x_dist, 2);
      GLfloat y_delta = pow (ypos - y_dist, 2);
      return x_delta + y_delta <= 1;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.2 2018-08-13 16:04:58-07 - - $
d49 1
a49 1
      GLfloat x_dist = xpos - mouse_y;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: mousetrace.cpp,v 1.1 2018-08-13 15:12:09-07 - - $
d43 1
a43 1
         GLfloat y = height * sin (theta) + ypos;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: mousedepth.cpp,v 1.4 2018-08-13 15:10:04-07 - - $
a13 1
   int depth {64};
d24 8
a31 8
const color red    {0xFF, 0x00, 0x00};
const color yellow {0xFF, 0xFF, 0x00};
const color green  {0x00, 0xFF, 0x00};

struct object {
   float xpos {0};
   float ypos {0};
   color rgb = green;
d33 2
a37 1
      glPushMatrix();
d40 4
a43 6
      float wid = window.width / 10;
      float hgt = window.height / 10;
      float delta = 2 * M_PI / 64;
      for (float theta = 0; theta < 2 * M_PI; theta += delta) {
         float x = wid * cos (theta) + xpos;
         float y = hgt * sin (theta) + ypos;
a46 1
      glPopMatrix();
d48 8
a55 1
} object;
a56 1

d59 2
a60 2
   glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
   object.draw();
d75 3
a77 3
   object.xpos = window.width / 2;
   object.ypos = window.height / 2;
   object.rgb = green;
a80 15
GLuint depth (int mouse_x, int mouse_y) {
   cout << __PRETTY_FUNCTION__ << ": "
        << mouse_x << "," << mouse_y << "): ";
   glEnable (GL_DEPTH_TEST);
   GLfloat scale, bias, depth;
   glGetFloatv (GL_DEPTH_SCALE, &scale);
   glGetFloatv (GL_DEPTH_BIAS, &bias);
   glReadPixels (mouse_x, window.height - mouse_y, 1, 1,
                 GL_DEPTH_COMPONENT, GL_FLOAT, &depth);
   GLuint intdepth = lrintf (depth * window.depth);
   cout << "scale=" << scale << ", bias=" << bias
        << ", depth=" << depth << ", intdepth=" << intdepth << endl;
   return intdepth;
}

d85 1
a85 5
   switch (button) {
      case GLUT_LEFT:
         window.mouse_state = state;
         break;
   }
a88 1

d92 9
a100 9
   if (depth (mouse_x, mouse_y) != 0) object.rgb = green;
   else {
      object.rgb = red;
      object.xpos = mouse_x;
      object.ypos = window.height - mouse_y;
      if (object.xpos < 0) object.xpos = window.width;
      if (object.xpos > window.width) object.xpos = 0;
      if (object.ypos < 0) object.ypos = window.height;
      if (object.ypos > window.height) object.ypos = 0;
d108 2
a109 2
   if (depth (mouse_x, mouse_y) != 0) object.rgb = green;
                                 else object.rgb = yellow;
@
