head	1.26;
access;
symbols;
locks;
comment	@// @;


1.26
date	2019.05.16.00.13.01;	author -;	state -;
branches;
next	1.25;

1.25
date	2019.05.16.00.10.49;	author -;	state -;
branches;
next	1.24;

1.24
date	2019.02.22.01.38.38;	author -;	state -;
branches;
next	1.23;

1.23
date	2018.08.14.21.30.21;	author -;	state -;
branches;
next	1.22;

1.22
date	2018.08.14.21.30.07;	author -;	state -;
branches;
next	1.21;

1.21
date	2018.08.06.20.38.43;	author -;	state -;
branches;
next	1.20;

1.20
date	2018.08.06.20.38.26;	author -;	state -;
branches;
next	1.19;

1.19
date	2018.08.06.20.38.09;	author -;	state -;
branches;
next	1.18;

1.18
date	2018.07.30.20.35.21;	author -;	state -;
branches;
next	1.17;

1.17
date	2018.02.08.01.33.53;	author -;	state -;
branches;
next	1.16;

1.16
date	2016.07.21.02.53.20;	author -;	state -;
branches;
next	1.15;

1.15
date	2016.07.06.23.04.53;	author -;	state -;
branches;
next	1.14;

1.14
date	2016.07.01.02.30.12;	author -;	state -;
branches;
next	1.13;

1.13
date	2016.07.01.02.21.04;	author -;	state -;
branches;
next	1.12;

1.12
date	2016.07.01.02.10.07;	author -;	state -;
branches;
next	1.11;

1.11
date	2016.06.30.21.05.03;	author -;	state -;
branches;
next	1.10;

1.10
date	2016.06.30.21.03.51;	author -;	state -;
branches;
next	1.9;

1.9
date	2016.06.30.20.58.48;	author -;	state -;
branches;
next	1.8;

1.8
date	2016.06.30.18.57.02;	author -;	state -;
branches;
next	1.7;

1.7
date	2016.06.29.21.57.19;	author -;	state -;
branches;
next	1.6;

1.6
date	2016.06.29.21.53.28;	author -;	state -;
branches;
next	1.5;

1.5
date	2016.06.24.00.09.10;	author -;	state -;
branches;
next	1.4;

1.4
date	2016.06.24.00.06.38;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.06.24.00.05.45;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.06.23.23.53.11;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.06.23.23.48.54;	author -;	state -;
branches;
next	;


desc
@@


1.26
log
@-
@
text
@// $Id: hello-world.cpp,v 1.25 2019-05-15 17:10:49-07 - - $

#include <cmath>
#include <iostream>
#include <memory>
#include <string>
#include <vector>
using namespace std;

#include <GL/freeglut.h>
#include <libgen.h>

// Characteristics of the window.
struct window {
   string name;
   int width {384};
   int height {256};
} window;

template <typename item_t>
struct cycle_iterator {
   const vector<item_t> items;
   size_t curr_item {0};
   cycle_iterator (initializer_list<item_t> list):
               items(vector<item_t> (list)) {}
   const item_t& operator*() { return items[curr_item]; }
   const item_t& operator[] (size_t index) {
      return items[(curr_item + index) % items.size()];
   }
   cycle_iterator& operator++() { 
      curr_item = (curr_item + 1) % items.size();
      return *this;
   }
};

cycle_iterator<string> greetings {
   "Hello, World!",
   "Hodie natus est radici frater.",
   "Goodbye, World!",
};

GLubyte RED[] = {0xFF, 0x00, 0x00};
GLubyte GREEN[] = {0x00, 0xFF, 0x00};
GLubyte BLUE[] = {0x00, 0x00, 0xFF};
cycle_iterator<GLubyte*> colors {RED, GREEN, BLUE};

cycle_iterator<void*> glut_fonts {
   GLUT_BITMAP_TIMES_ROMAN_24,
   GLUT_BITMAP_HELVETICA_18,
   GLUT_BITMAP_9_BY_15,
};


void draw_rectangle (const GLubyte* color) {
   glBegin (GL_POLYGON);
   glColor3ubv (color);
   glVertex2f (0, 0);
   glVertex2f (window.width, 0);
   glVertex2f (window.width, window.height);
   glVertex2f (0, window.height);
   glEnd();
}

void draw_ellipse (const GLubyte* color) {
   glBegin (GL_POLYGON);
   glColor3ubv (color);
   const GLfloat delta = 2 * M_PI / 64;
   const GLfloat width = window.width / 2.5;
   const GLfloat height = window.height / 2.5;
   const GLfloat xoffset = window.width / 2.0;
   const GLfloat yoffset = window.height / 2.0;
   for (GLfloat theta = 0; theta < 2 * M_PI; theta += delta) {
      GLfloat xpos = width * cos (theta) + xoffset;
      GLfloat ypos = height * sin (theta) + yoffset;
      glVertex2f (xpos, ypos);
   }
   glEnd();
}

void draw_greeting (const string& greeting, const GLubyte* color) {
   const GLubyte* glgreeting =
         reinterpret_cast<const GLubyte*> (greeting.c_str());

   void* font = *glut_fonts;
   int greeting_width = glutBitmapLength (font, glgreeting);
   int greeting_height = glutBitmapHeight (font);

   glColor3ubv (color);

   float xpos = window.width / 2.0 - greeting_width / 2.0;
   float ypos = window.height / 2.0 - greeting_height / 4.0;
   glRasterPos2f (xpos, ypos);

   glutBitmapString (font, glgreeting);
}

void display() {
   glClearColor (0.15, 0.15, 0.15, 1.0);
   glClear (GL_COLOR_BUFFER_BIT);

   draw_rectangle (colors[0]);
   draw_ellipse (colors[1]);
   draw_greeting (*greetings, colors[2]);

   glutSwapBuffers();
}


void invert_colors() {
   for (size_t color = 0; color < 3; ++color) {
      for (size_t rgb = 0; rgb < 3; ++rgb) {
         colors[color][rgb] ^= 0xFF;
      }
   }
}

void keyboard (GLubyte key, int, int) {
   enum {BS = 8, LF = 10, CR = 13, ESC = 27, DEL = 127};
   switch (key) {
      case ' ': case BS: case CR: case LF: case DEL:
         invert_colors();
         break;
      case 'c': case 'C':
         ++colors;
         break;
      case 'f': case 'F':
         ++glut_fonts;
         break;
      case 'g': case 'G':
         ++greetings;
         break;
      case 'q': case 'Q': case ESC:
         exit (EXIT_SUCCESS);
   }
   glutPostRedisplay();
}

void mouse (int button, int state, int, int) {
   if (state == GLUT_DOWN) {
      switch (button) {
         case GLUT_LEFT_BUTTON:
            ++glut_fonts;
            break;
         case GLUT_MIDDLE_BUTTON:
            ++greetings;
            break;
         case GLUT_RIGHT_BUTTON:
            ++colors;
            break;
      }
   }
   glutPostRedisplay();
}


void reshape (int width, int height) {
   window.width = width;
   window.height = height;
   glMatrixMode (GL_PROJECTION);
   glLoadIdentity();
   gluOrtho2D (0, window.width, 0, window.height);
   glMatrixMode (GL_MODELVIEW);
   glViewport (0, 0, window.width, window.height);
   glutPostRedisplay();
}

void print_howto() {
cout << R"(
To cycle the colors: right mouse button or key 'c' or 'C'.
To cycle the fonts: left mouse button or key 'f' or 'F'.
To cycle the greetings: middle mouse button or key 'g' or 'G'.
To invert the colors: key Space, Backspace, Return, or Delete.
To quit: key 'q' or 'Q' or ESC.
)";
}

int main (int argc, char** argv) {
   print_howto();
   window.name = basename (argv[0]);
   glutInit (&argc, argv);
   glutInitDisplayMode (GLUT_RGBA | GLUT_DOUBLE);
   glutInitWindowSize (window.width, window.height);
   glutCreateWindow (window.name.c_str());
   glutDisplayFunc (display);
   glutReshapeFunc (reshape);
   glutKeyboardFunc (keyboard);
   glutMouseFunc (mouse);
   glutMainLoop();
   return 0;
}

//TEST// mkpspdf hello-world.cpp.ps hello-world.cpp*

@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: hello-world.cpp,v 1.24 2019-02-21 17:38:38-08 - - $
d192 2
a193 1
//TEST// mkpspdf hello-world.cpp.ps hello-world.cpp
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: hello-world.cpp,v 1.23 2018-08-14 14:30:21-07 - - $
d192 1
@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: hello-world.cpp,v 1.22 2018-08-14 14:30:07-07 - - $
d16 2
a17 2
   int width {640};
   int height {480};
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: hello-world.cpp,v 1.21 2018-08-06 13:38:43-07 - - $
d181 1
a181 2
   //glutInitDisplayMode (GLUT_RGBA | GLUT_DOUBLE);
   glutInitDisplayMode (GLUT_RGBA);
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: hello-world.cpp,v 1.20 2018-08-06 13:38:26-07 - - $
d181 2
a182 1
   glutInitDisplayMode (GLUT_RGBA | GLUT_DOUBLE);
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: hello-world.cpp,v 1.19 2018-08-06 13:38:09-07 - - $
d161 1
a161 1
   glOrtho2D (0, window.width, 0, window.height);
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: hello-world.cpp,v 1.18 2018-07-30 13:35:21-07 - - $
d161 1
a161 1
   glOrtho (0, window.width, 0, window.height);
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: hello-world.cpp,v 1.17 2018-02-07 17:33:53-08 - - $
d161 1
a161 1
   glOrtho (0, window.width, 0, window.height, -1, +1);
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: hello-world.cpp,v 1.16 2016-07-20 19:53:20-07 - - $
d16 2
a17 2
   int width {384};
   int height {256};
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: hello-world.cpp,v 1.15 2016-07-06 16:04:53-07 - - $
d120 1
a120 1
      case BS: case CR: case LF: case DEL:
d172 1
a172 1
To invert the colors: key Backspace, Return, or Delete.
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: hello-world.cpp,v 1.14 2016-06-30 19:30:12-07 - - $
d22 1
a22 1
   const unique_ptr<vector<item_t>> items;
d25 4
a28 4
               items(make_unique<vector<item_t>> (list)) {}
   item_t& operator*() { return (*items)[curr_item]; }
   item_t& operator[] (size_t index) {
      return (*items)[(curr_item + index) % items->size()];
d31 1
a31 1
      curr_item = (curr_item + 1) % items->size();
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: hello-world.cpp,v 1.12 2016-06-30 19:10:07-07 - - $
d42 4
a45 4
const GLubyte RED[] = {0xFF, 0x00, 0x00};
const GLubyte GREEN[] = {0x00, 0xFF, 0x00};
const GLubyte BLUE[] = {0x00, 0x00, 0xFF};
cycle_iterator<const GLubyte*> colors {RED, GREEN, BLUE};
d109 8
d118 1
a118 1
   enum {ESC = 27};
d120 6
a131 3
      case 'c': case 'C':
         ++colors;
         break;
d155 1
a166 1

d169 1
d172 1
a172 1
To cycle the colors: right mouse button or key 'c' or 'C'.
@


1.13
log
@-
@
text
@d23 1
a23 1
   size_t place {0};
d26 8
a33 4
   size_t rem (size_t index) { return (place + index) % items->size(); }
   item_t& operator*() { return (*this)[0]; }
   item_t& operator[] (size_t index) { return (*items)[rem (index)]; }
   cycle_iterator& operator++() { place = rem (place); return *this; }
d53 1
d108 1
d155 1
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: hello-world.cpp,v 1.11 2016-06-30 14:05:03-07 - - $
d23 1
a23 1
   size_t curr_item {0};
d26 4
a29 8
   item_t& operator*() { return (*items)[curr_item]; }
   item_t& operator[] (size_t index) {
      return (*items)[(curr_item + index) % items->size()];
   }
   cycle_iterator& operator++() { 
      curr_item = (curr_item + 1) % items->size();
      return *this;
   }
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: hello-world.cpp,v 1.10 2016-06-30 14:03:51-07 - - $
d5 1
d20 17
a36 1
const vector<string> greetings {
a40 1
size_t curr_greeting {0};
d45 1
a45 2
const vector<const GLubyte*> colors {RED, GREEN, BLUE};
size_t curr_color {0};
d47 3
a49 1
const vector<void*> glut_fonts {
a50 2
   GLUT_BITMAP_HELVETICA_18,
   GLUT_BITMAP_TIMES_ROMAN_24,
a51 1
size_t curr_font {glut_fonts.size() - 1};
a52 1

d66 1
a66 1
   const GLfloat delta = 2 * M_PI / 32;
d83 1
a83 1
   void* font = glut_fonts[curr_font];
a95 1

d100 3
a102 3
   draw_rectangle (colors[(curr_color + 1) % colors.size()]);
   draw_ellipse (colors[(curr_color + 2) % colors.size()]);
   draw_greeting (greetings[curr_greeting], colors[curr_color]);
d111 1
a111 1
         curr_font = (curr_font + 1) % glut_fonts.size();
d114 1
a114 1
         curr_greeting = (curr_greeting + 1) % greetings.size();
d117 1
a117 1
         curr_color = (curr_color + 1) % colors.size();
d129 1
a129 1
            curr_font = (curr_font + 1) % glut_fonts.size();
d132 1
a132 1
            curr_greeting = (curr_greeting + 1) % greetings.size();
d135 1
a135 1
            curr_color = (curr_color + 1) % colors.size();
a141 1

@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: hello-world.cpp,v 1.9 2016-06-30 13:58:48-07 - - $
d130 1
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: hello-world.cpp,v 1.8 2016-06-30 11:57:02-07 - - $
d39 1
d83 1
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: hello-world.cpp,v 1.7 2016-06-29 14:57:19-07 - - $
a38 1

a92 1

a138 1

@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: hello-world.cpp,v 1.6 2016-06-29 14:53:28-07 - - $
d143 2
a144 2
static string howto =
R"(To cycle the fonts: left mouse button or key 'f' or 'F'.
d147 2
a148 2
To quit: key 'q' or 'Q' or ESC.)";
cout << howto << endl;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: hello-world.cpp,v 1.5 2016-06-23 17:09:10-07 - - $
d39 1
d94 1
d141 1
d143 1
a143 1
cout <<
d147 2
a148 2
To quit: key 'q' or 'Q' or ESC.)"
<< endl;
@


1.5
log
@-
@
text
@d1 1
a1 3
// $Id: hello-world.cpp,v 1.4 2016-06-23 17:06:38-07 - - $

// Display text "Hello World" in a window.
d3 1
d6 1
d19 53
a71 2
// Called by glutMainLoop to display window contents.
void display() {
d73 1
a73 2
   // Glut strings use unsigned char instead of signed char.
   string hello {"Hello, World"};
d75 3
a77 2
   // Pointer to one of the bitmap fonts.
   void* font = GLUT_BITMAP_TIMES_ROMAN_24;
d79 2
a80 4
   // Width and height in pixels of the bitmap string.
   int str_width = glutBitmapLength (font,
                   reinterpret_cast<const GLubyte*> (hello.c_str()));
   int str_height = glutBitmapHeight (font);
d82 2
a83 2
   // Set the background default color and clear the window.
   glClearColor (0.25, 0.25, 0.25, 1.0);
d86 6
a91 8
   // Set the color of the letters in the message.
   const GLubyte GREEN[] = {0x00, 0xFF, 0x00};
   glColor3ubv (GREEN);

   // Position (x,y) of the left end and base of the string.
   float xpos = window.width / 2.0 - str_width / 2.0;
   float ypos = window.height / 2.0 - str_height / 4.0;
   glRasterPos2f (xpos, ypos);
d93 17
a109 3
   // Draw the bitmap in the window.
   //glutBitmapString (font, hello.c_str());
   for (auto ch: hello) glutBitmapCharacter (font, ch);
d111 15
a125 2
   // Swap the passive and active buffers to display the window.
   glutSwapBuffers();
a127 1

d139 9
d149 1
d157 2
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: hello-world.cpp,v 1.3 2016-06-23 17:05:45-07 - - $
d15 2
a16 2
   int width {256};
   int height {192};
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: hello-world.cpp,v 1.2 2016-06-23 16:53:11-07 - - $
a20 1
   cout << __func__ << "()" << endl;
a55 1
   cout << __func__ << "(" << width << "," << height << ")" << endl;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: hello-world.cpp,v 1.1 2016-06-23 16:48:54-07 - - $
a67 14
void close() {
   cout << __func__ << "()" << endl;
}

void entry (int state) {
   cout << __func__ << "(";
   switch (state) {
      case GLUT_LEFT: cout << "GLUT_LEFT"; break;
      case GLUT_ENTERED: cout << "GLUT_ENTERED"; break;
      default: cout << state; break;
   }
   cout << ")" << endl;
}

a75 2
   glutEntryFunc (entry);
   glutCloseFunc (close);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: hello-gl.cpp,v 1.29 2014-07-22 16:38:07-07 - - $
d30 2
a31 1
   int str_width = glutBitmapLength (font, (GLubyte*) hello.c_str());
@
