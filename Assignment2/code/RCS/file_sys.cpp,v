head	1.7;
access;
symbols;
locks;
comment	@// @;


1.7
date	2019.07.09.21.05.44;	author -;	state -;
branches;
next	1.6;

1.6
date	2018.06.27.21.44.57;	author -;	state -;
branches;
next	1.5;

1.5
date	2016.01.15.00.16.52;	author -;	state -;
branches;
next	1.4;

1.4
date	2016.01.14.22.45.21;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.01.14.00.21.53;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.01.13.21.49.20;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.01.13.21.34.03;	author -;	state -;
branches;
next	;


desc
@@


1.7
log
@-
@
text
@// $Id: file_sys.cpp,v 1.6 2018-06-27 14:44:57-07 - - $

#include <iostream>
#include <stdexcept>
#include <unordered_map>

using namespace std;

#include "debug.h"
#include "file_sys.h"

int inode::next_inode_nr {1};

struct file_type_hash {
   size_t operator() (file_type type) const {
      return static_cast<size_t> (type);
   }
};

ostream& operator<< (ostream& out, file_type type) {
   static unordered_map<file_type,string,file_type_hash> hash {
      {file_type::PLAIN_TYPE, "PLAIN_TYPE"},
      {file_type::DIRECTORY_TYPE, "DIRECTORY_TYPE"},
   };
   return out << hash[type];
}

inode_state::inode_state() {
   DEBUGF ('i', "root = " << root << ", cwd = " << cwd
          << ", prompt = \"" << prompt() << "\"");
}

const string& inode_state::prompt() const { return prompt_; }

ostream& operator<< (ostream& out, const inode_state& state) {
   out << "inode_state: root = " << state.root
       << ", cwd = " << state.cwd;
   return out;
}

inode::inode(file_type type): inode_nr (next_inode_nr++) {
   switch (type) {
      case file_type::PLAIN_TYPE:
           contents = make_shared<plain_file>();
           break;
      case file_type::DIRECTORY_TYPE:
           contents = make_shared<directory>();
           break;
   }
   DEBUGF ('i', "inode " << inode_nr << ", type = " << type);
}

int inode::get_inode_nr() const {
   DEBUGF ('i', "inode = " << inode_nr);
   return inode_nr;
}


file_error::file_error (const string& what):
            runtime_error (what) {
}

const wordvec& base_file::readfile() const {
   throw file_error ("is a " + error_file_type());
}

void base_file::writefile (const wordvec&) {
   throw file_error ("is a " + error_file_type());
}

void base_file::remove (const string&) {
   throw file_error ("is a " + error_file_type());
}

inode_ptr base_file::mkdir (const string&) {
   throw file_error ("is a " + error_file_type());
}

inode_ptr base_file::mkfile (const string&) {
   throw file_error ("is a " + error_file_type());
}


size_t plain_file::size() const {
   size_t size {0};
   DEBUGF ('i', "size = " << size);
   return size;
}

const wordvec& plain_file::readfile() const {
   DEBUGF ('i', data);
   return data;
}

void plain_file::writefile (const wordvec& words) {
   DEBUGF ('i', words);
}

size_t directory::size() const {
   size_t size {0};
   DEBUGF ('i', "size = " << size);
   return size;
}

void directory::remove (const string& filename) {
   DEBUGF ('i', filename);
}

inode_ptr directory::mkdir (const string& dirname) {
   DEBUGF ('i', dirname);
   return nullptr;
}

inode_ptr directory::mkfile (const string& filename) {
   DEBUGF ('i', filename);
   return nullptr;
}

@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.5 2016-01-14 16:16:52-08 - - $
d63 21
a98 13
void plain_file::remove (const string&) {
   throw file_error ("is a plain file");
}

inode_ptr plain_file::mkdir (const string&) {
   throw file_error ("is a plain file");
}

inode_ptr plain_file::mkfile (const string&) {
   throw file_error ("is a plain file");
}


a102 8
}

const wordvec& directory::readfile() const {
   throw file_error ("is a directory");
}

void directory::writefile (const wordvec&) {
   throw file_error ("is a directory");
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.4 2016-01-14 14:45:21-08 - - $
d33 1
a33 1
const string& inode_state::prompt() { return prompt_; }
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.3 2016-01-13 16:21:53-08 - - $
d90 1
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.2 2016-01-13 13:49:20-08 - - $
d28 13
a115 11
}

inode_state::inode_state() {
   DEBUGF ('i', "root = " << root << ", cwd = " << cwd
          << ", prompt = \"" << prompt << "\"");
}

ostream& operator<< (ostream& out, const inode_state& state) {
   out << "inode_state: root = " << state.root
       << ", cwd = " << state.cwd;
   return out;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.1 2016-01-13 13:34:03-08 - - $
d5 1
d14 15
a28 3
inode::inode(inode_t init_type):
   inode_nr (next_inode_nr++), type (init_type)
{
d30 1
a30 1
      case PLAIN_INODE:
d33 1
a33 1
      case DIR_INODE:
d45 3
a47 10
plain_file_ptr plain_file_ptr_of (file_base_ptr ptr) {
   plain_file_ptr pfptr = dynamic_pointer_cast<plain_file> (ptr);
   if (pfptr == nullptr) throw invalid_argument ("plain_file_ptr_of");
   return pfptr;
}

directory_ptr directory_ptr_of (file_base_ptr ptr) {
   directory_ptr dirptr = dynamic_pointer_cast<directory> (ptr);
   if (dirptr == nullptr) throw invalid_argument ("directory_ptr_of");
   return dirptr;
a49 1

d65 12
d83 8
d93 10
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.12 2014-07-03 13:29:57-07 - - $
d9 1
a9 1
#include "inode.h"
@
