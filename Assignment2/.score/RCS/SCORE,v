head	1.2;
access;
symbols;
locks;
comment	@# @;


1.2
date	2019.10.19.00.19.03;	author -;	state -;
branches;
next	1.1;

1.1
date	2018.06.27.21.52.10;	author -;	state -;
branches;
next	;


desc
@@


1.2
log
@-
@
text
@$Id: SCORE,v 1.1 2018-06-27 14:52:10-07 - - $

Copy all of the files in this directory into the student's
directory.  For each point deduction, give a reason.  Numbers in
parens are the max points for each check.

Grade only one partner's code and assign them the same score.

*****************************************************************

SOURCE CODE.

     Run mk.build

     (3) Checksource was silent, did not complain.  No extra
         files were submitted, except as per asgt spec.
         Header files must end with .h and implementation files
         with either .cc or .cpp.

     (3) Used good consistent indentation.  Did not use any
         one-letter idents, used only meaningful idents.
         Did not leave any commented-out code interspersed
         with running code.

     (3) In both commands.cc(cpp) and file_sys.cc(cpp), used a throw to
         report errors, which is caught in main().

     In the module commands.cc(cpp):  Check for reasonable code and a
     proper implementation of:

     (3) fn_cd, fn_echo, fn_exit, fn_prompt, fn_pwd

     (3) fn_cat, fn_make, fn_makedir

     (3) fn_ls, fn_lsr

     (3) fn_rm, fn_rmr

     In file_sys.cc(cpp):  Check for reasonable code in:

     (3) readfile, writefile

     (3) mkdir, mkfile (but it is also OK if these are done
         in the constructor instead.

     (3) Proper additions to inode_state

source points: /30
min 1, max 30

*****************************************************************

PROGRAM TESTING:

     If mk.build failed to create an executable binary,
     stop here.  No output points if it does not build.

     Run mk.tests
     Check each test run *.out and *.err for the expected output.

     (5) test0.ysh

     (4) test1.ysh

     (4) test2.ysh

     (4) test3.ysh

     (4) test4.ysh

     Other checks.

     (4) Deduct 4 points if the valgrind test indicated memory
         leaks, invalid memory references, or any other complaint.

     (5) Deduct 3 points here if any test run seg faulted,
         dumped core, or otherwise terminated abnormally.
         Deduct 5 points if more than one test did so.

testing points: /30
min 0, max 30.

*****************************************************************

SUBTOTAL=
min 1, max 60

If pair programming, TOTALSCORE = SUBTOTAL - TOTAL1.
If not, TOTALSCORE = SUBTOTAL.

TOTALSCORE=
min 1, max 60

@


1.1
log
@-
@
text
@d1 1
a1 1
$Id: SCORE,v 1.7 2018-06-27 14:52:02-07 - - $
d61 1
a61 1
     (4) test0.ysh
d73 1
a73 1
     (2) Deduct 2 points if the valgrind test indicated memory
@
