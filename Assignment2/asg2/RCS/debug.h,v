head	1.12;
access;
symbols;
locks;
comment	@ * @;


1.12
date	2019.10.16.22.17.26;	author -;	state -;
branches;
next	1.11;

1.11
date	2019.10.08.20.46.59;	author -;	state -;
branches;
next	1.10;

1.10
date	2018.01.25.22.02.55;	author -;	state -;
branches;
next	1.9;

1.9
date	2018.01.25.21.57.54;	author -;	state -;
branches;
next	1.8;

1.8
date	2018.01.25.21.57.35;	author -;	state -;
branches;
next	1.7;

1.7
date	2016.01.15.00.16.52;	author -;	state -;
branches;
next	1.6;

1.6
date	2015.01.03.02.13.23;	author -;	state -;
branches;
next	1.5;

1.5
date	2015.01.03.02.10.18;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.06.11.20.34.25;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.03.27.02.55.18;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.03.27.01.43.29;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.03.27.01.39.40;	author -;	state -;
branches;
next	;


desc
@@


1.12
log
@-
@
text
@// $Id: debug.h,v 1.11 2019-10-08 13:46:59-07 - - $

#ifndef __DEBUG_H__
#define __DEBUG_H__

#include <bitset>
#include <climits>
#include <string>
using namespace std;

// debug -
//    static class for maintaining global debug flags.
// setflags -
//    Takes a string argument, and sets a flag for each char in the
//    string.  As a special case, '@@', sets all flags.
// getflag -
//    Used by the DEBUGF macro to check to see if a flag has been set.
//    Not to be called by user code.

class debugflags {
   private:
      using flagset_ = bitset<UCHAR_MAX + 1>;
      static flagset_ flags_;
   public:
      static void setflags (const string& optflags);
      static bool getflag (char flag);
      static void where (char flag, const char* file, int line,
                         const char* pretty_function);
};


// DEBUGF -
//    Macro which expands into trace code.  First argument is a
//    trace flag char, second argument is output code that can
//    be sandwiched between <<.  Beware of operator precedence.
//    Example:
//       DEBUGF ('u', "foo = " << foo);
//    will print two words and a newline if flag 'u' is  on.
//    Traces are preceded by filename, line number, and function.

#ifdef NDEBUG
#define DEBUGF(FLAG,CODE) ;
#define DEBUGS(FLAG,STMT) ;
#else
#define DEBUGF(FLAG,CODE) { \
           if (debugflags::getflag (FLAG)) { \
              debugflags::where (FLAG, __FILE__, __LINE__, \
                                 __PRETTY_FUNCTION__); \
              cerr << CODE << endl; \
           } \
        }
#define DEBUGS(FLAG,STMT) { \
           if (debugflags::getflag (FLAG)) { \
              debugflags::where (FLAG, __FILE__, __LINE__, \
                                 __PRETTY_FUNCTION__); \
              STMT; \
           } \
        }
#endif

#endif

@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: debug.h,v 1.10 2018-01-25 14:02:55-08 - - $
d22 2
a23 2
      using flagset = bitset<UCHAR_MAX + 1>;
      static flagset flags;
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: debug.h,v 1.9 2018-01-25 13:57:54-08 - - $
d12 1
a12 2
//    static class for maintaining global debug flags, each indicated
//    by a single character.
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: debug.h,v 1.8 2018-01-25 13:57:35-08 - - $
d29 1
a29 1
                         const char* func);
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: debug.h,v 1.7 2016-01-14 16:16:52-08 - - $
d48 1
a48 1
              debugflags::where (FLAG, __FILE__, __LINE__,
d55 1
a55 1
              debugflags::where (FLAG, __FILE__, __LINE__,
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: debug.h,v 1.6 2015-01-02 18:13:23-08 - - $
d48 2
a49 1
              debugflags::where (FLAG, __FILE__, __LINE__, __func__); \
d55 2
a56 1
              debugflags::where (FLAG, __FILE__, __LINE__, __func__); \
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: debug.h,v 1.5 2015-01-02 18:10:18-08 - - $
a10 1
//
a19 1
//
a32 1
//
a40 1
//
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: debug.h,v 1.4 2014-06-11 13:34:25-07 - - $
d25 2
a26 1
      static bitset<UCHAR_MAX + 1> flags;
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: debug.h,v 1.3 2014-03-26 19:55:18-07 - - $
d6 2
a8 1
#include <vector>
d25 1
a25 1
      static vector<bool> flags;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: debug.h,v 1.2 2014-03-26 18:43:29-07 - - $
a7 1

@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: debug.h,v 1.1 2014-03-26 18:39:40-07 - - $
d33 1
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: trace.h,v 1.4 2014-03-26 17:34:27-07 - - $
d29 2
a30 2
      void where (char flag, const char* file, int line,
                       const char* func);
@
